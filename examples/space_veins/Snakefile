import os
import glob

configfile: "smk.config.yaml"

def get_tles_paths():
    tles_fname_prefixes = config["tles_prefixes"]
    tles_fpaths = [] 
    
    for fname in os.listdir("./tles/"):
        if fname.split("_")[0] in tles_fname_prefixes:
            tles_fpaths.append(f'{"tles/" + fname}')
    
    return tles_fpaths

def quote_strs(tles_paths: list[str]):
    return [str('"' + tle_path + '"') for tle_path in tles_paths]

rule update_omnetini:
    input:
        ini_template="omnetpp.ini.template",
        tles_paths=get_tles_paths()
    params:
        # as snakemake won't accept filepath strings containing quotes as input
        # but updateomnetini.pp requires them
        quoted_tles_paths= lambda wildcards, input: quote_strs(input.tles_paths)
    output:
        "omnetpp.ini"
    shell:
        "python3 /workspaces/ma-max-wendler/scripts/keplertraces/updateomnetini.py {input.ini_template} ./traces/ {params.quoted_tles_paths}"

rule create_traces_v2:
    input:
        ini_path="omnetpp.ini",
        tles_path=lambda wildcards: glob.glob("tles/" + wildcards.constellation + "_*.txt")
    params:
        configname=lambda wildcards: expand("{optional_Debug}{constellation}-kepler", 
                                        optional_Debug="Debug-" if config["debug_mode"] else "",
                                        constellation=wildcards.constellation), 
        itrs_option="-i" if config["itrs_traces"] else "",
        orekit_option="-o" if config["use_orekit"] else ""
    output:
        config["traces_dir"] + "{constellation}.done"
    shell:
        """
        python3 /workspaces/ma-max-wendler/scripts/keplertraces/create_traces.py {input.ini_path} {input.tles_path} {config[traces_dir]} -c {params.configname} {params.itrs_option} {params.orekit_option}
        touch {output}
        """

rule create_traces_all:
    input:
        expand("{traces_dir}{constellation}.done", traces_dir=config["traces_dir"], constellation=config["tles_prefixes"])
    output:
        expand("{traces_dir}.done", traces_dir=config["traces_dir"])
    shell:
        "touch {output}"

rule make_makefiles:
    input:
        "../../Makefile"
    output:
        "../../src/Makefile"
    shell:
        "cd ../../ && make makefiles"

rule build_space_veins_devcontainer:
    input:
        "../../Makefile",
        "cleanall.done"
    output:
        "../../bin/space_veins_run",
        temp("build_devcontainer.done")
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        cd ../../
        make makefiles
        bear --append -- make all -j{threads}
        cd examples/space_veins
        touch "build_devcontainer.done"
        """

rule build_space_veins_singularity:
    input:
        "../../Makefile",
        "cleanall.done"
    output:
        "../../bin/space_veins_run",
        temp("build_singularity.done")
    container:
        "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        make makefiles
        ucc make -j{threads} all
        make bin/space_veins_run
        touch "cleanall.done"
        """

rule cleanSpaceVeins:
    input:
        "../../Makefile",
        "../../src/Makefile"
    output:
        temp("cleanall.done")
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    threads:
        1
    shell:
        """
        cd ../../ &&
        make cleanall &&
        cd examples/space_veins &&
        touch "cleanall.done" 
        """

rule createRunmakerLogFile:
    output:
        "runs/{oppConfig}_runs.log"
    shell:
        "touch {output}"

rule createRunFile:
    input:
        "omnetpp.ini"
    output:
        "runs/{oppConfig}_runs.txt"
    # container:
    #    "../../singularity/singularity-space_veins.sif"
    shell:
        """
        echo '. ./run -u Cmdenv -c {wildcards.oppConfig} -r 1' > {output}
        """

rule createRunmakerFiles:
    input:
        expand("runs/{optional_Debug}{constellation}-{mobility}_runs.log", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"]),
        expand("runs/{optional_Debug}{constellation}-{mobility}_runs.txt", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"]),
    output:
        temp("runmaker.done")
    shell:
        "touch runmaker.done"

def get_const_from_config(wildcards):
    config = wildcards.oppConfig.replace("Debug-","")
    constellation = config.split("-")[0]
    return constellation

def get_trace_requirement(wildcards):
    if "kepler" in wildcards.oppConfig:
        return config["traces_dir"] + get_const_from_config(wildcards) + ".done"
    else: 
        return []

rule run:
    input:
        # only require trace files for Kepler-orbit-based runs
        get_trace_requirement,
        logFile="runs/{oppConfig}_runs.log",
        runFile="runs/{oppConfig}_runs.txt"
    output:
        "runs/{oppConfig}_done.txt"
    threads:
        1
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    shell:
        """
        python3 ../../lib/runmaker/runmaker4.py --jobs={threads} -l {input.logFile} --loglines=200 {input.runFile} && touch {output}
        """

rule runAll:
    input:
        expand("runs/{optional_Debug}{constellation}-{mobility}_done.txt", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"])
    output:
        "runs/runall.done"
    shell:
        "touch runs/runall.done"

def formatModuleRegex(wildcards):
    regex = ".".join(wildcards.module.split(".")[:-1])
    regex = regex.replace(".", "\.")
    regex = regex.replace("[", "\[")
    regex = regex.replace("]", "\]")
    regex.replace("leo", "(?<module>leo.*\[[0-9]+\])")
    # regex = regex.replace("*", "(?<module>[0-9]+)")
    regex = "\'^" + regex + "\'"
    return regex

def format_coord_vectors(wildcards):
    if (wildcards.coordframe == "wgs84"):
        return ("--list -F " + "wgs84CoordLat:vector=wgs84CoordLat_vector" +
                                " -F wgs84CoordLon:vector=wgs84CoordLon_vector " +
                                " -F wgs84CoordAlt:vector=wgs84CoordAlt_vector")
    elif (wildcards.coordframe == "itrf"):
        return ("--list -F " + "itrfCoordX:vector=itrfCoordX_vector" +
                                " -F itrfCoordY:vector=itrfCoordY_vector" +
                                " -F itrfCoordZ:vector=itrfCoordZ_vector")
    else:
        raise ValueError(f"coordinate frame {wildcards.coordframe} is not supported for csv results")

def formatItervars(wildcards):
    i = ""
    for s in config["itervars"]:
        i += "-I " + s + " "
    return i

rule vec2csv:
    input:
        "runs/{oppConfig}_done.txt"
    output:
        "csv/vectors/{oppConfig}_{coordframe}_sorted.csv"
    params:
        itervars=formatItervars,
        vectors=format_coord_vectors,
        moduleRegex='^SatelliteExampleScenario\.leo',
        unsorted_path="csv/vectors/{oppConfig}_{coordframe}.csv"
    threads:
        1
    shell:
        """
        perl ../../lib/veins_scripts/eval/opp_vec2csv.pl -v -m emt -M {params.moduleRegex} {params.vectors} -A repetition {params.itervars} results/{wildcards.oppConfig}*.vec > {params.unsorted_path}
        python3 ../../scripts/time_sort_csv.py {params.unsorted_path}  
        rm {params.unsorted_path}
        """

def get_sat_mods_per_const():
    sat_modules_per_constellation = {}
    results = os.listdir("./results/")
    debug_mode_str = "Debug-" if config["debug_mode"] else ""
    for constellation in config["tles_prefixes"]:
        for res_fname in results:
            if res_fname.startswith(f"{debug_mode_str}{constellation}") and res_fname.endswith(".vec"):
                # parse satellite module names from .vec

                sat_mods = set()

                with open("./results/" + res_fname, "r") as vec_file:

                    for line in vec_file.readlines():
                        if "SatelliteExampleScenario.leo" in line:
                            sat_name = line.split(" ")[2]
                            sat_mods.add(sat_name)
                
                sat_modules_per_constellation[constellation] = sat_mods
    
    return sat_modules_per_constellation

def get_const_sat_mods(constellation: str):
    results = os.listdir("./results/")
    debug_mode_str = "Debug-" if config["debug_mode"] else ""
    sat_mods = set()
    for res_fname in results:
        if res_fname.startswith(f"{debug_mode_str}{constellation}") and res_fname.endswith(".vec"):
            # parse satellite module names from .vec

            with open("./results/" + res_fname, "r") as vec_file:

                for line in vec_file.readlines():
                    if "SatelliteExampleScenario.leo" in line:
                        sat_name = line.split(" ")[2]
                        sat_mods.add(sat_name)
    
    return sat_mods

def formatSatVecCsvFileNames():
    files = list()
    f = ""
    configs_per_constellation = {}
    for constellation in config["tles_prefixes"]:
        configs_per_constellation[constellation] = expand("{optional_Debug}{constellation}-{mobility}", 
                                                        optional_Debug="Debug-" if config["debug_mode"] else "" ,
                                                        constellation=[constellation],
                                                        mobility=config["mobilities"])

    # sat_mods_per_constellation = get_sat_mods_per_const()

    for c in configs_per_constellation.keys():
        # sat_mods = sat_mods_per_constellation[c]

            for vec in config["sat_vectors"]:
                f = "csv/vectors/" + c + "_" + config["sat_mod_regex_base"] + "_" + vec + ".csv"
                files.append(f)

    return files

def format_constellation_satvec_csvnames(wildcards):
    config_name = wildcards.opp_config
    # constellation = config_name.replace("Debug-", "")
    # sat_mods = get_const_sat_mods(constellation)
    
    files = []

    for frame in config["coord_frames"]:
        f = "csv/vectors/" + config_name + "_" + frame + "_sorted.csv"
        files.append(f)
    
    return files
    
rule sat_vec_to_csv_constellation:
    input:
        "runs/{opp_config}_done.txt",
        format_constellation_satvec_csvnames
    output:
        "csv/{opp_config}_vecs.done"
    shell:
        "touch {output}"

rule calc_pos_diffs:
    input:
        "csv/{constellation}-{mobility}"
    output:
        "csv/pos_diff/{constellation}_{coord_frame}_{mobility1}-{mobility2}_distances.csv"