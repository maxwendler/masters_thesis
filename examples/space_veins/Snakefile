import os

configfile: "smk.config.yaml"

def get_tles_paths():
    tles_fname_prefixes = config["tles_prefixes"]
    tles_fpaths = []
    tles_dir = config["tles_dir"]
    if tles_dir[-1] != "/":
        tles_dir += "/" 
    
    for fname in os.listdir(tles_dir):
        if fname.split("_")[0] in tles_fname_prefixes:
            tles_fpaths.append(f'{tles_dir + fname}')
    
    return tles_fpaths

def quote_strs(tles_paths: list[str]):
    return [str('"' + tle_path + '"') for tle_path in tles_paths]

rule update_omnetini:
    input:
        ini_template="omnetpp.ini.template",
        tles_paths=get_tles_paths()
    params:
        # as snakemake won't accept filepath strings containing quotes as input
        # but updateomnetini.pp requires them
        quoted_tles_paths= lambda wildcards, input: quote_strs(input.tles_paths)
    output:
        "omnetpp.ini"
    shell:
        "python3 /workspaces/ma-max-wendler/scripts/keplertraces/updateomnetini.py {input.ini_template} {config[traces_dir]} {params.quoted_tles_paths}"

rule create_traces:
    input:
        ini_path="omnetpp.ini",
        tles_paths=lambda wildcards: sorted(get_tles_paths())
    output:
        "traces/.done"
    params:
        confignames = sorted(expand("{optional_Debug}{constellation}-kepler", 
                             optional_Debug="Debug-" if config["debug_mode"] else "" ,
                             constellation=config["tles_prefixes"])) 
    run:
        print(params.confignames)
        shell_commands = []
        for i in range(len(input.tles_paths)):
            command = f"python3 /workspaces/ma-max-wendler/scripts/keplertraces/create_traces.py {input.ini_path} {input.tles_paths[i]} {config['traces_dir']} -c {params.confignames[i]}"
            shell_commands.append(command)
        shell_commands.append(f"touch {output}")
        shell(" && ".join(shell_commands))

rule make_makefiles:
    input:
        "../../Makefile"
    output:
        "../../src/Makefile"
    shell:
        "cd ../../ && make makefiles"

rule build_space_veins_devcontainer:
    input:
        "../../Makefile",
        "cleanall.done"
    output:
        "../../bin/space_veins_run",
        temp("build_devcontainer.done")
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        cd ../../
        make makefiles
        bear --append -- make all -j{threads}
        cd examples/space_veins
        touch "build_devcontainer.done"
        """

rule build_space_veins_singularity:
    input:
        "../../Makefile",
        "cleanall.done"
    output:
        "../../bin/space_veins_run",
        temp("build_singularity.done")
    container:
        "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        make makefiles
        ucc make -j{threads} all
        make bin/space_veins_run
        touch "cleanall.done"
        """

rule cleanSpaceVeins:
    input:
        "../../Makefile",
        "../../src/Makefile"
    output:
        temp("cleanall.done")
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    threads:
        1
    shell:
        """
        cd ../../ &&
        make cleanall &&
        cd examples/space_veins &&
        touch "cleanall.done" 
        """

rule createRunmakerLogFile:
    output:
        "{oppConfig}_runs.log"
    shell:
        "touch {output}"

rule createRunFile:
    input:
        "omnetpp.ini"
    output:
        "{oppConfig}_runs.txt"
    # container:
    #    "../../singularity/singularity-space_veins.sif"
    shell:
        """
        echo './run -u Cmdenv -c {wildcards.oppConfig} -r 0' > {output}
        """

rule createRunmakerFiles:
    input:
        expand("{optional_Debug}{constellation}-{mobility}_runs.log", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"]),
        expand("{optional_Debug}{constellation}-{mobility}_runs.txt", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"]),
    output:
        temp("runmaker.done")
    shell:
        "touch runmaker.done"