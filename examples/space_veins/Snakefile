import os
import glob
import json
import sys
sys.path.append(os.path.join(sys.path[0],"..","..","scripts", "plots"))
from satname_to_modname import satname_to_modname
sys.path.append(os.path.join(sys.path[0],"..","..",".conda", "lib", "python3.10", "site-packages"))
sys.path.append(os.path.join(sys.path[0],"..","..","scripts", "keplertraces"))
from tleparse import read
from parseomnetini import parseomnetini
from pathlib import Path
import configparser

configfile: "smk.config.yaml"

def get_tle_path(constellation):
    for fname in os.listdir("./tles/"):
        if constellation in fname:
            return "tles/" + fname

def get_tles_paths():
    tles_fname_prefixes = config["tles_prefixes"]
    tles_fpaths = [] 
    
    for fname in os.listdir("./tles/"):
        if fname.split("_")[0] in tles_fname_prefixes and fname.endswith(".txt"):
            tles_fpaths.append(f'{"tles/" + fname}')
    
    return tles_fpaths

def quote_strs(tles_paths: list[str]):
    return [str('"' + tle_path + '"') for tle_path in tles_paths]

rule calc_tle_times:
    input:
        script="../../scripts/keplertraces/tletimes.py",
        tles=lambda wildcards: get_tle_path(wildcards.constellation)
    output:
        "tles/{constellation}_times.json"
    shell:
        "python3 {input.script} {input.tles}"

rule update_omnetini:
    input:
        "../../scripts/keplertraces/updateomnetini.py",
        ini_template="omnetpp.ini.template",
        tles_paths=get_tles_paths()
    params:
        # as snakemake won't accept filepath strings containing quotes as input
        # but updateomnetini.py requires them
        quoted_tles_paths= lambda wildcards, input: quote_strs(input.tles_paths),
    output:
        "omnetpp.ini"
    shell:
        """python3 ../../scripts/keplertraces/updateomnetini.py {input.ini_template} traces/ {params.quoted_tles_paths}
        
        cp backups/omnetpp.ini old/omnetpp.ini

        cp omnetpp.ini backups/omnetpp.ini
        """

def config_params_changed(config: str) -> bool:
    inipath = "omnetpp.ini"
    old_inipath = "old/omnetpp.ini"
    
    params_tuple = parseomnetini(inipath, config)
    old_params_tuple = parseomnetini(old_inipath, config)

    for val_i in range(0, len(params_tuple)):
        if params_tuple[val_i] != old_params_tuple[val_i]:
            return True

    return False    

rule get_omnetini_traceparams:
    input:
        "../../scripts/keplertraces/parseomnetini.py",
        ini="omnetpp.ini"
    output:
        "traces/params/{opp_config}_params.txt"
    params:
        # gets updated by script if values actually change"
    shell:
        # only touch output, so that only updates of params matter for rule create_traces
        """
        python3 ../../scripts/keplertraces/parseomnetini.py {input.ini} {wildcards.opp_config} {output}
        """

rule create_traces:
    input:
        "../../scripts/keplertraces/create_traces.py",
        params_path=lambda wildcards: "traces/params/" + get_debug_str() + "{constellation}-kepler_params.txt",
        tles_path=lambda wildcards: glob.glob("tles/" + wildcards.constellation + "_*.txt")
    params:
        configname=lambda wildcards: expand("{optional_Debug}{constellation}-kepler", 
                                        optional_Debug="Debug-" if config["debug_mode"] else "",
                                        constellation=wildcards.constellation),
    output:
        "traces/{constellation}_traces.done"
    shell:
        """
        python3 ../../scripts/keplertraces/create_traces.py {input.params_path} {input.tles_path} traces/ -c {params.configname} -i -o
        date +%Y%m%d%H%M%S > {output}
        """

rule make_makefiles:
    input:
        "../../Makefile"
    output:
        "../../src/Makefile"
    shell:
        "cd ../../ && make makefiles"

rule build_space_veins_devcontainer:
    input:
        "../../Makefile",
        "cleanall.done"
    output:
        "../../bin/space_veins_run",
        temp("build_devcontainer.done")
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        cd ../../
        make makefiles
        bear --append -- make all -j{threads}
        cd examples/space_veins
        touch "build_devcontainer.done"
        """

rule build_space_veins_singularity:
    input:
        "../../Makefile",
        "cleanall.done"
    output:
        "../../bin/space_veins_run",
        temp("build_singularity.done")
    container:
        "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        make makefiles
        ucc make -j{threads} all
        make bin/space_veins_run
        touch "cleanall.done"
        """

rule cleanSpaceVeins:
    input:
        "../../Makefile",
        "../../src/Makefile"
    output:
        temp("cleanall.done")
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    threads:
        1
    shell:
        """
        cd ../../ &&
        make cleanall &&
        cd examples/space_veins &&
        touch "cleanall.done" 
        """

rule createRunmakerLogFile:
    output:
        "runs/{oppConfig}_runs.log"
    shell:
        "touch {output}"

def get_trace_requirement(wildcards):
    if "kepler" in wildcards.oppConfig:
        return "traces/" + get_const_from_config(wildcards.oppConfig) + "_traces.done"
    else: 
        return []

rule createRunFile:
    input:
        # only require trace files for Kepler-orbit-based runs
        # ---
        # placed here instead of in rule 'run' so that run file is regenerated with more recent traces
        # otherwise, run file still has run marked as 'd', done
        get_trace_requirement,
        "omnetpp.ini"
    output:
        "runs/{oppConfig}_runs.txt"
    # container:
    #    "../../singularity/singularity-space_veins.sif"
    # params:
    #    shell="echo '. ./run -u Cmdenv -c {wildcards.oppConfig} -r 1' > {output}"
    shell:
        """
            echo '. ./run -u Cmdenv -c {wildcards.oppConfig} -r 1' > {output}
        """

rule createRunmakerFiles:
    input:
        expand("runs/{optional_Debug}{constellation}-{mobility}_runs.log", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"]),
        expand("runs/{optional_Debug}{constellation}-{mobility}_runs.txt", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"]),
    output:
        temp("runmaker.done")
    shell:
        "touch runmaker.done"

def get_const_from_config(config_str):
    config = config_str.replace("Debug-","")
    constellation = config.split("-")[0]
    return constellation

rule run:
    input:
        logFile="runs/{oppConfig}_runs.log",
        runFile="runs/{oppConfig}_runs.txt"
    output:
        "runs/{oppConfig}_done.txt"
    threads:
        1
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    shell:
        """
        python3 ../../lib/runmaker/runmaker4.py --jobs={threads} -l {input.logFile} --loglines=200 {input.runFile} 
        date +%Y%m%d%H%M%S > {output}
        """

rule runAll:
    input:
        expand("runs/{optional_Debug}{constellation}-{mobility}_done.txt", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"])
    output:
        "runs/runall.done"
    shell:
        "touch runs/runall.done"

def format_coord_vectors(wildcards):
    if (wildcards.coordframe == "wgs84"):
        return ("--list -F " + "wgs84CoordLat:vector=wgs84CoordLat_vector" +
                                " -F wgs84CoordLon:vector=wgs84CoordLon_vector " +
                                " -F wgs84CoordAlt:vector=wgs84CoordAlt_vector")
    elif (wildcards.coordframe == "itrf"):
        return ("--list -F " + "itrfCoordX:vector=itrfCoordX_vector" +
                                " -F itrfCoordY:vector=itrfCoordY_vector" +
                                " -F itrfCoordZ:vector=itrfCoordZ_vector")
    elif (wildcards.coordframe == "omnet"):
        return ("--list -F " + "omnetCoordX:vector=omnetCoordX_vector" +
                                " -F omnetCoordY:vector=omnetCoordY_vector" +
                                " -F omnetCoordZ:vector=omnetCoordZ_vector")
    else:
        raise ValueError(f"coordinate frame {wildcards.coordframe} is not supported for csv results")

def formatItervars(wildcards):
    i = ""
    for s in config["itervars"]:
        i += "-I " + s + " "
    return i

rule vec2csv:
    input:
        "runs/{oppConfig}_done.txt",
        "../../scripts/time_sort_csv.py"
    output:
        "csv/vectors/{oppConfig}_{coordframe}_sorted.csv"
    params:
        itervars=formatItervars,
        vectors=format_coord_vectors,
        moduleRegex='^SatelliteExampleScenario\.leo',
        unsorted_path="csv/vectors/{oppConfig}_{coordframe}.csv"
    threads:
        1
    shell:
        """
        perl ../../lib/veins_scripts/eval/opp_vec2csv.pl -v -m emt -M {params.moduleRegex} {params.vectors} -A repetition {params.itervars} results/{wildcards.oppConfig}*.vec > {params.unsorted_path}
        python3 ../../scripts/time_sort_csv.py {params.unsorted_path}  
        rm {params.unsorted_path}
        """

def get_const_sat_mods(constellation: str):

    const_tles_fname = filter( lambda tles_path: tles_path.startswith(constellation), os.listdir("./tles/")).__next__()
    tles = read("./tles/" + const_tles_fname)

    sat_mods = set()
    for tle in tles:
        sat_mods.add( satname_to_modname(tle.name) )
    
    return sat_mods

def get_debug_str():
    return "Debug-" if config["debug_mode"] else ""

def format_constellation_satvec_csvnames(wildcards):
    config_name = get_debug_str() + wildcards.constellation + "-" + wildcards.mobility 

    files = []

    for frame in config["coord_frames"]:
        f = "csv/vectors/" + config_name + "_" + frame + "_sorted.csv"
        files.append(f)
    
    return files

rule sat_vec_to_csv_constellation:
    input:
        "runs/" + get_debug_str() + "{constellation}-{mobility}_done.txt",
        format_constellation_satvec_csvnames
    output:
        "csv/" + get_debug_str() + "{constellation}-{mobility}_vecs.done"
    shell:
        "touch {output}"

def get_coord_inputs(wildcards):
        return ["csv/vectors/{constellation}-{mobility1}_{coord_frame}_sorted.csv",
                "csv/vectors/{constellation}-{mobility2}_{coord_frame}_sorted.csv"]

rule calc_pos_diffs:
    input:
        "../../scripts/plots/positional_differences.py",
        coord_csvs=get_coord_inputs
    output:
        "csv/pos_diff/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_distances.csv"
    shell:
        "python3 ../../scripts/plots/positional_differences.py {input.coord_csvs[0]} {input.coord_csvs[1]} {wildcards.coord_frame} -c > {output}"

rule plot_pos_diffs:
    input:
        "../../scripts/plots/plot_differences.py",
        in_csv="csv/pos_diff/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_distances.csv"
    output:
        "plots/pos_diff/{constellation}/"+ get_debug_str() + "{coord_frame}_{mobility1}-{mobility2}_{leo_modname}_distances.png"
    shell:
        "python3 ../../scripts/plots/plot_differences.py {input.in_csv} '{wildcards.leo_modname}' '{output}'"

rule plot_pos_diffs_ecdf:
    input:
        "../../scripts/plots/plot_differences_ecdf.py",
        in_csv="csv/pos_diff/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_distances.csv"
    output:
        "plots/pos_diff/{constellation}/"+ get_debug_str() + "{coord_frame}_{mobility1}-{mobility2}_{leo_modname}_distances_ecdf.png"
    shell:
        "python3 ../../scripts/plots/plot_differences_ecdf.py {input.in_csv} '{wildcards.leo_modname}' '{output}'"

rule plot_pos_diffs_both:
    input:
        "../../scripts/plots/plot_differences_both.py",
        tle_times="tles/{constellation}_times.json",
        in_csv="csv/pos_diff/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_distances.csv"
    output:
        "plots/pos_diff/{constellation}/"+ get_debug_str() + "{coord_frame}_{mobility1}-{mobility2}_{leo_modname}_distances_both.png"
    shell:
        "python3 ../../scripts/plots/plot_differences_both.py {input.in_csv} '{wildcards.leo_modname}' {input.tle_times} '{output}'"

def get_const_pos_diff_paths(wildcards):
    return expand("plots/pos_diff/{constellation}/" + get_debug_str() + "{coord_frame}_{mobility1}-{mobility2}_{leo_modname}_distances_both.png",
                constellation=wildcards.constellation, 
                coord_frame=wildcards.coord_frame, 
                mobility1=wildcards.mobility1, 
                mobility2=wildcards.mobility2,
                leo_modname=get_const_sat_mods(wildcards.constellation))

rule plot_const_pos_diffs:
    input:
        get_const_pos_diff_paths
    output:
        "plots/pos_diff/{constellation}/" + get_debug_str() + "{coord_frame}_{mobility1}-{mobility2}_distances.done"
    shell:
        "touch {output}"

rule plot_diff_distributions:
    input:
        "../../scripts/plots/plot_difference_distributions.py",
        in_csv="csv/pos_diff/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_distances.csv"
    output:
        "plots/pos_diff_distr/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_sum-histogram.png",
        "plots/pos_diff_distr/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_sum-histogram.html",
        "plots/pos_diff_distr/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_boxplot.png",
        "plots/pos_diff_distr/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_boxplot.html"
    params:
        output_dir="plots/pos_diff_distr/"
    shell:
        """
        python3 ../../scripts/plots/plot_difference_distributions.py {input.in_csv} {params.output_dir} {wildcards.constellation}_{wildcards.coord_frame}_{wildcards.mobility1}-{wildcards.mobility2}_
        """

rule plot_all_diff_distributions:
    input:
        "../../scripts/plots/plot_difference_distributions.py",
        expand("plots/pos_diff_distr/{debug}{constellation}_itrf_sgp4-kepler_sum-histogram.png",
                debug=get_debug_str(), constellation=config["tles_prefixes"]),
        expand("plots/pos_diff_distr/" + get_debug_str() + "{constellation}_itrf_sgp4-kepler_sum-histogram.html",
                debug=get_debug_str(), constellation=config["tles_prefixes"]),
        expand("plots/pos_diff_distr/" + get_debug_str() + "{constellation}_itrf_sgp4-kepler_boxplot.png",
                debug=get_debug_str(), constellation=config["tles_prefixes"]),
        expand("plots/pos_diff_distr/" + get_debug_str() + "{constellation}_itrf_sgp4-kepler_boxplot.html",
                debug=get_debug_str(), constellation=config["tles_prefixes"])
    output:
        "plots/pos_diff_distr/.done"
    shell:
        "touch {output}"

rule calc_pos_diff_diffs_itrf_omnet:
    input:
        "csv/pos_diff/" + get_debug_str() + "{constellation}_itrf_{mobility1}-{mobility2}_distances.csv",
        "csv/pos_diff/" + get_debug_str() + "{constellation}_omnet_{mobility1}-{mobility2}_distances.csv",
        "../../scripts/plots/diff_differences.py"
    output:
        "csv/pos_diff_diffs/" + get_debug_str() + "{constellation}_itrf2omnet_{mobility1}-{mobility2}_distances.csv" 
    shell:
        "python3 ../../scripts/plots/diff_differences.py '{input[0]}' '{input[1]}' > {output}"

rule plot_pos_diff_diffs_both:
    input:
        "../../scripts/plots/plot_differences_both.py",
        in_csv="csv/pos_diff_diffs/" + get_debug_str() + "{constellation}_itrf2omnet_{mobility1}-{mobility2}_distances.csv"
    output:
        "plots/pos_diff_diffs/" + "{constellation}/"+ get_debug_str() + "itrf2omnet_{mobility1}-{mobility2}_{leo_modname}_distances_both.png"
    shell:
        "python3 ../../scripts/plots/plot_differences_both.py {input.in_csv} '{wildcards.leo_modname}' '{output}'"

def get_const_pos_diff_diffs_paths(wildcards):
    return expand("plots/pos_diff_diffs/{constellation}/" + get_debug_str() + "itrf2omnet_{mobility1}-{mobility2}_{leo_modname}_distances_both.png",
                constellation=wildcards.constellation,  
                mobility1=wildcards.mobility1, 
                mobility2=wildcards.mobility2,
                leo_modname=get_const_sat_mods(wildcards.constellation))

rule plot_const_pos_diff_diffs:
    input:
        get_const_pos_diff_diffs_paths
    output:
        "plots/pos_diff_diffs{constellation}/" + get_debug_str() + "itrf2omnet_{mobility1}-{mobility2}_distances.done"
    shell:
        "touch {output}"

rule calc_omnet_coord_stats:
    input:
        in_csv="csv/vectors/{oppConfig}_omnet_sorted.csv",
        script="../../scripts/plots/sop_stats.py"
    output:
        "csv/sop/{oppConfig}_distances.csv",
        "csv/sop/{oppConfig}_angles.csv",
        "csv/sop/{oppConfig}_delays.csv"
    params:
        output_dir="csv/sop/"
    shell:
        "python3 {input.script} {input.in_csv} 0 0 0 {params.output_dir} -e 25"

rule plot_omnet_coord_stats:
    input:
        script="../../scripts/statistics/plot_sop_stats.py",
        tle_times="tles/{constellation}_times.json",
        angle_csvs=lambda wildcards: expand("csv/sop/" + "{constellation}-{mobility}_angles.csv",
                                    constellation=wildcards.constellation,
                                    mobility=["sgp4","kepler"]),
        dist_csvs=lambda wildcards: expand("csv/sop/" + "{constellation}-{mobility}_distances.csv",
                                    constellation=wildcards.constellation,
                                    mobility=["sgp4","kepler"]),
        delay_csvs=lambda wildcards: expand("csv/sop/" + "{constellation}-{mobility}_delays.csv",
                                    constellation=wildcards.constellation,
                                    mobility=["sgp4","kepler"])
    output:
        "plots/sop/" + "{constellation}/sgp4-kepler_{modname}_angles_distances_delays.html",
        "plots/sop/" + "{constellation}/sgp4-kepler_{modname}_angles_distances_delays.svg"
    params:
        output_base_path = "plots/sop/{constellation}/sgp4-kepler_{modname}_angles_distances_delays"
    shell:
        "python3 {input.script} '{wildcards.modname}' --angles_csv_paths {input.angle_csvs} --distances_csv_paths {input.dist_csvs} --delays_csv_paths {input.delay_csvs} --min_angle 25 --tle_times_path {input.tle_times} '{params.output_base_path}' --formats svg html"

def get_const_omnet_stats_plot_paths(wildcards):
    return expand("plots/sop/{constellation}/sgp4-kepler_{modname}_angles_distances_delays.{format}",
                constellation=wildcards.constellation,  
                modname=get_const_sat_mods(wildcards.constellation),
                format=["svg", "html"])

rule plot_const_omnet_coord_stats:
    input:
        get_const_omnet_stats_plot_paths
    output:
        "plots/sop/{constellation}/sgp4-kepler_angles_distances_delays.done"
    shell:
        "touch {output}"

rule calc_omnet_stat_diffs:
    input:
        script="../../scripts/statistics/omnet_stat_differences.py",
        ref_mobility_csv="csv/sop/{constellation}-{ref_mobility}_{stat}.csv",
        new_mobility_csv="csv/sop/{constellation}-{new_mobility}_{stat}.csv"
    output:
        "csv/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_{stat}_{diffs_or_changes}.csv"
    params:
        change_option=lambda wildcards: "-c" if wildcards.diffs_or_changes == "changes" else ""
    shell:
        "python3 {input.script} {input.ref_mobility_csv} {input.new_mobility_csv} {output} {params.change_option}"

rule plot_omnet_stat_diffs:
    input:
        script="../../scripts/statistics/plot_omnet_stat_differences.py",
        angles_csv="csv/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_angles_{diffs_or_changes}.csv",
        distances_csv="csv/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_distances_{diffs_or_changes}.csv",
        delays_csv="csv/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_delays_{diffs_or_changes}.csv"
    output:
        "plots/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}_full.html",
        svg_out="plots/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}_full.svg"
    params:
        change_option=lambda wildcards: "-c" if wildcards.diffs_or_changes == "changes" else ""
    shell:
        "python3 {input.script} {input.angles_csv} {input.distances_csv} {input.delays_csv} 15 '{wildcards.modname}' '{output.svg_out}' {params.change_option}"

rule plot_local_omnet_stat_diffs:
    input:
        script="../../scripts/statistics/plot_omnet_stat_differences.py",
        angles_csv="csv/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_angles_{diffs_or_changes}.csv",
        distances_csv="csv/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_distances_{diffs_or_changes}.csv",
        delays_csv="csv/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_delays_{diffs_or_changes}.csv",
        comm_comp_json="stats/compare_comm_periods/{constellation}/{ref_mobility}-{new_mobility}_{modname}_communication_comparison.json"
    output:
        "plots/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}_local.html",
        svg_out="plots/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}_local.svg"
    params:
        change_option=lambda wildcards: "-c" if wildcards.diffs_or_changes == "changes" else ""
    shell:
        "python3 {input.script} {input.angles_csv} {input.distances_csv} {input.delays_csv} 15 '{wildcards.modname}' '{output.svg_out}' {params.change_option} --comm_comp_json '{input.comm_comp_json}'"

def get_const_omnet_stat_diff_plot_paths(wildcards):
    return expand("plots/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}{local_option}.{format}",
                constellation=wildcards.constellation,
                ref_mobility=wildcards.ref_mobility,
                new_mobility=wildcards.new_mobility,
                modname=get_const_sat_mods(wildcards.constellation),
                diffs_or_changes=["diffs", "changes"],
                format={"svg", "html"},
                local_option=["_local","_full"])

rule plot_const_omnet_stat_diffs:
    input:
        get_const_omnet_stat_diff_plot_paths
    output:
        "plots/sop_diffs/{constellation}_{ref_mobility}-{new_mobility}_angles_distances_delays.done"
    shell:
        "touch {output}"

rule calc_comm_period_info:
    input:
        script="../../scripts/statistics/comm_period_info.py",
        tle_times="tles/{constellation}_times.json",
        angle_csv=lambda wildcards: expand("csv/sop/{constellation}-{mobility}_angles.csv",
                                    constellation=wildcards.constellation,
                                    mobility=wildcards.mobility),
        dist_csv=lambda wildcards: expand("csv/sop/{constellation}-{mobility}_distances.csv",
                                    constellation=wildcards.constellation,
                                    mobility=wildcards.mobility),
        delay_csv=lambda wildcards: expand("csv/sop/{constellation}-{mobility}_delays.csv",
                                    constellation=wildcards.constellation,
                                    mobility=wildcards.mobility)
    output:
        "stats/comm_periods/{constellation}/{mobility}/{modname}_communication-periods.json"
    shell:
        "python3 {input.script} {input.angle_csv} {input.dist_csv} {input.delay_csv} {input.tle_times} '{wildcards.modname}' 25 '{output}'"

def get_const_comm_period_info_paths(wildcards):
    return expand("stats/comm_periods/{constellation}/{mobility}/{modname}_communication-periods.json",
                constellation=wildcards.constellation,  
                mobility=["sgp4","kepler"], 
                modname=get_const_sat_mods(wildcards.constellation))

rule calc_const_comm_period_info:
    input:
        get_const_comm_period_info_paths
    output:
        "stats/comm_periods/{constellation}.done"
    shell:
        "touch {output}"

rule compare_comm_period_info:
    input:
        script="../../scripts/statistics/compare_comm_period_info.py",
        ref_stats="stats/comm_periods/{constellation}/{ref_mobility}/{modname}_communication-periods.json",
        new_stats="stats/comm_periods/{constellation}/{new_mobility}/{modname}_communication-periods.json"
    output:
        "stats/compare_comm_periods/{constellation}/{ref_mobility}-{new_mobility}_{modname}_communication_comparison.json"
    shell:
        "python3 {input.script} '{input.ref_stats}' '{input.new_stats}' '{output}'"

rule plot_communication_period_comparison:
    input:
        script="../../scripts/statistics/plot_comm_comparison.py",
        ref_stats="stats/comm_periods/{constellation}/{ref_mobility}/{modname}_communication-periods.json",
        new_stats="stats/comm_periods/{constellation}/{new_mobility}/{modname}_communication-periods.json",
        period_groups="stats/compare_comm_periods/{constellation}/{ref_mobility}-{new_mobility}_{modname}_communication_comparison.json"
    output:
        "stats/compare_comm_periods/{constellation}/{ref_mobility}-{new_mobility}_{modname}_communication_comparison.svg",
        "stats/compare_comm_periods/{constellation}/{ref_mobility}-{new_mobility}_{modname}_communication_comparison.html"
    shell:
        "python3 {input.script} '{input.period_groups}' {wildcards.ref_mobility} '{input.ref_stats}' {wildcards.new_mobility} '{input.new_stats}'"

def get_const_comm_comp_json_paths(wildcards):
    return expand("stats/compare_comm_periods/{constellation}/sgp4-kepler_{modname}_communication_comparison.json",
            constellation=wildcards.constellation,  
            modname=get_const_sat_mods(wildcards.constellation))

def get_const_comm_comp_plot_paths(wildcards):
    return expand("stats/compare_comm_periods/{constellation}/sgp4-kepler_{modname}_communication_comparison.{format}",
            constellation=wildcards.constellation,  
            modname=get_const_sat_mods(wildcards.constellation),
            format=["png", "html"])

rule plot_const_communication_period_comparisons:
    input:
        get_const_comm_comp_plot_paths
    output:
        "stats/compare_comm_periods/{constellation}_communication_comparisons.done"
    shell:
        "touch {output}"

rule plot_communication_period_comparison_overlaps:
    input:
        script="../../scripts/statistics/plot_sat_overlap_stats.py",
        period_groups="stats/compare_comm_periods/{constellation}/{ref_mobility}-{new_mobility}_{modname}_communication_comparison.json"
    output:
        "stats/compare_comm_periods/{constellation}/{ref_mobility}-{new_mobility}_{modname}_overlaps.png"
    shell:
        """
        python3 {input.script} '{input.period_groups}'
        """

rule calc_communication_period_comparison_summary:
    input:
        get_const_comm_comp_json_paths,
        script="../../scripts/statistics/summarize_comm_comp_info.py"
    output:
        "stats/compare_comm_periods/{constellation}/{ref_mobility}-{new_mobility}_summary.json"
    params:
        comp_jsons_dir="stats/compare_comm_periods/{constellation}/"
    shell:
        "python3 {input.script} {params.comp_jsons_dir} {output}"

rule plot_const_overlap_stats:
    input:
        get_const_comm_comp_json_paths,
        script="../../scripts/statistics/plot_const_overlap_stats.py"
    output:
        "stats/compare_comm_periods/{constellation}_overlaps_plot.html",
        png_out="stats/compare_comm_periods/{constellation}_overlaps_plot.png"
    params:
        comp_jsons_dir="stats/compare_comm_periods/{constellation}/"
    shell:
        "python3 {input.script} {params.comp_jsons_dir} {output.png_out}"

rule satmod_csv:
    input:
        "../../scripts/plots/to_sat_csv.py",
        in_csv="csv/vectors/{opp_config}_{coord_frame}_sorted.csv"
    output:
        "csv/vectors/satmod/{opp_config}_{coord_frame}_{leo_modname}.csv"
    shell:
        "python3 ../../scripts/plots/to_sat_csv.py {input.in_csv} '{wildcards.leo_modname}' > '{output}'"

def get_satmod_csv_paths(wildcards, same_config=True):
    leo_modnames = wildcards.leo_modnames.split("+")

    # one config (= one mobility) -> one csv per satmod 
    if same_config:
        base_path = "csv/vectors/satmod/" + wildcards.opp_config + "_" + wildcards.coord_frame + "_"
        return [(base_path + modname + ".csv") for modname in leo_modnames]

    # tw0 configs (= two mobilities) -> two csvs per satmod 
    else:
        mob1_config_str = get_debug_str() + wildcards.constellation + "-" + wildcards.mobility1
        mob2_config_str = get_debug_str() + wildcards.constellation + "-" + wildcards.mobility2
        mob1_base_path = "csv/vectors/satmod/" + mob1_config_str + "_" + wildcards.coord_frame + "_"
        mob2_base_path = "csv/vectors/satmod/" + mob2_config_str + "_" + wildcards.coord_frame + "_"
        return [(mob1_base_path + modname + ".csv") for modname in leo_modnames] + [(mob2_base_path + modname + ".csv") for modname in leo_modnames]
    
rule plot_orbs_of_mobility:
    input:
        "../../scripts/plots/plot_orbs.py",
        coord_paths=get_satmod_csv_paths
    output:
        "plots/orbs/mobility/{opp_config}_{coord_frame}_{leo_modnames}.html"
    params:
        csv_paths= lambda wildcards, input: quote_strs(input.coord_paths)
    shell:
        """
        python3 ../../scripts/plots/plot_orbs.py -c {params.csv_paths} -o '{output}' -e
        """

rule plot_orbs_of_mobilities:
    input:
        "../../scripts/plots/plot_orbs.py",
        coord_paths=lambda wildcards: get_satmod_csv_paths(wildcards, False)
    output:
        "plots/orbs/mobilities/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_{leo_modnames}.html"
    params:
        csv_paths= lambda wildcards, input: quote_strs(input.coord_paths),
    shell:
        "python3 ../../scripts/plots/plot_orbs.py -c {params.csv_paths} -o '{output}' -e"

rule make_symbolic_link_and_hidden_data:
    input:
        "omnetpp.ini"
    output:
        "test.txt"
    #shell:
    #    """
    #    touch {output}
    #    touch old/{output}
    #    """
    run:
        os.makedirs("./old", exist_ok=True)
        if Path("./old/test.txt").exists():
            print("old test txt exists")
        else:
            print("old test txt does not exist")

        #with open(output[0], "w") as output_f:
        #    output_f.write(" ")
        
        with open("old/" + output[0], "w") as output_f_copy:
            output_f_copy.write("huasefuiasdiufhasidfhiasdhfiashui")
        
        os.symlink("old/" + output[0], output[0])