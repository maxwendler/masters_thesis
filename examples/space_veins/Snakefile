import os

configfile: "smk.config.yaml"

def get_tles_paths():
    tles_fname_prefixes = config["tles_prefixes"]
    tles_fpaths = []
    tles_dir = config["tles_dir"]
    if tles_dir[-1] != "/":
        tles_dir += "/" 
    
    for fname in os.listdir(tles_dir):
        if fname.split("_")[0] in tles_fname_prefixes:
            tles_fpaths.append(f'{tles_dir + fname}')
    
    return tles_fpaths

def quote_strs(tles_paths: list[str]):
    return [str('"' + tle_path + '"') for tle_path in tles_paths]

rule update_omnetini:
    input:
        ini_template="omnetpp.ini.template",
        tles_paths=get_tles_paths()
    params:
        # as snakemake won't accept filepath strings containing quotes as input
        # but updateomnetini.pp requires them
        quoted_tles_paths= lambda wildcards, input: quote_strs(input.tles_paths)
    output:
        "omnetpp.ini"
    shell:
        "python3 /workspaces/ma-max-wendler/scripts/keplertraces/updateomnetini.py {input.ini_template} {config[traces_dir]} {params.quoted_tles_paths}"

rule create_traces:
    input:
        ini_path="omnetpp.ini",
        tles_paths=lambda wildcards: sorted(get_tles_paths())
    output:
        "traces/.done"
    params:
        confignames = sorted(expand("{optional_Debug}{constellation}-kepler", 
                             optional_Debug="Debug-" if config["debug_mode"] else "" ,
                             constellation=config["tles_prefixes"])) 
    run:
        print(params.confignames)
        shell_commands = []
        for i in range(len(input.tles_paths)):
            command = f"python3 /workspaces/ma-max-wendler/scripts/keplertraces/create_traces.py {input.ini_path} {input.tles_paths[i]} {config['traces_dir']} -c {params.confignames[i]}"
            shell_commands.append(command)
        shell_commands.append(f"touch {output}")
        shell(" && ".join(shell_commands))

rule make_makefiles:
    input:
        "../../Makefile"
    output:
        "../../src/Makefile"
    shell:
        "cd ../../ && make makefiles"

rule build_space_veins_devcontainer:
    input:
        "../../Makefile",
        "cleanall.done"
    output:
        "../../bin/space_veins_run",
        temp("build_devcontainer.done")
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        cd ../../
        make makefiles
        bear --append -- make all -j{threads}
        cd examples/space_veins
        touch "build_devcontainer.done"
        """

rule build_space_veins_singularity:
    input:
        "../../Makefile",
        "cleanall.done"
    output:
        "../../bin/space_veins_run",
        temp("build_singularity.done")
    container:
        "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        make makefiles
        ucc make -j{threads} all
        make bin/space_veins_run
        touch "cleanall.done"
        """

rule cleanSpaceVeins:
    input:
        "../../Makefile",
        "../../src/Makefile"
    output:
        temp("cleanall.done")
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    threads:
        1
    shell:
        """
        cd ../../ &&
        make cleanall &&
        cd examples/space_veins &&
        touch "cleanall.done" 
        """

rule createRunmakerLogFile:
    output:
        "runs/{oppConfig}_runs.log"
    shell:
        "touch {output}"

rule createRunFile:
    input:
        "omnetpp.ini"
    output:
        "runs/{oppConfig}_runs.txt"
    # container:
    #    "../../singularity/singularity-space_veins.sif"
    shell:
        """
        echo '. ./run -u Cmdenv -c {wildcards.oppConfig} -r 0' > {output}
        """

rule createRunmakerFiles:
    input:
        expand("runs/{optional_Debug}{constellation}-{mobility}_runs.log", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"]),
        expand("runs/{optional_Debug}{constellation}-{mobility}_runs.txt", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"]),
    output:
        temp("runmaker.done")
    shell:
        "touch runmaker.done"

rule run:
    input:
        "traces/.done",
        logFile="runs/{oppConfig}_runs.log",
        runFile="runs/{oppConfig}_runs.txt"
    output:
        "runs/{oppConfig}_done.txt"
    threads:
        1
    #container:
    #    "../../singularity/singularity-space_veins.sif"
    shell:
        """
        python3 ../../lib/runmaker/runmaker4.py --jobs={threads} -l {input.logFile} --loglines=200 {input.runFile} && touch {output}
        """

rule runAll:
    input:
        expand("runs/{optional_Debug}{constellation}-{mobility}_done.txt", 
                optional_Debug="Debug-" if config["debug_mode"] else "" ,
                constellation=config["tles_prefixes"],
                mobility=config["mobilities"])
    output:
        "runs/runall.done"
    shell:
        "touch runs/runall.done"

def formatModuleRegex(wildcards):
    regex = ".".join(wildcards.module.split(".")[:-1])
    regex = regex.replace(".", "\.")
    regex = regex.replace("[", "\[")
    regex = regex.replace("]", "\]")
    regex = regex.replace("*", "(?<module>[0-9]+)")
    regex = "\'^" + regex + "\'"
    return regex

def formatVector(wildcards):
    v = wildcards.vector.split(".")[-1]
    return "-F " + v + "=" + v.replace(":", "_")

def formatItervars(wildcards):
    i = ""
    for s in config["itervars"]:
        i += "-I " + s + " "
    return i

rule vec2csv:
    input:
        "runs/{oppConfig}_done.txt"
    output:
        "csv/vectors/{oppConfig}_{module}_{vector}.csv"
    params:
        itervars=formatItervars,
        vector=formatVector,
        moduleRegex=formatModuleRegex
    threads:
        1
    shell:
        """
        perl ../../lib/veins_scripts/eval/opp_vec2csv.pl -v -M {params.moduleRegex} {params.vector} -A repetition {params.itervars} results/{wildcards.oppConfig}*.vec > {output}
        """

def get_sat_mods_per_const():
    sat_modules_per_constellation = {}
    results = os.listdir("./results/")
    debug_mode_str = "Debug-" if config["debug_mode"] else ""
    for constellation in config["tles_prefixes"]:
        for res_fname in results:
            if res_fname.startswith(f"{debug_mode_str}{constellation}") and res_fname.endswith(".vec"):
                # parse satellite module names from .vec

                sat_mods = set()

                with open("./results/" + res_fname, "r") as vec_file:

                    for line in vec_file.readlines():
                        if "SatelliteExampleScenario.leo" in line:
                            sat_name = line.split(" ")[2]
                            sat_mods.add(sat_name)
                
                sat_modules_per_constellation[constellation] = sat_mods
    
    return sat_modules_per_constellation

def get_const_sat_mods(constellation: str):
    results = os.listdir("./results/")
    debug_mode_str = "Debug-" if config["debug_mode"] else ""
    sat_mods = set()
    for res_fname in results:
        if res_fname.startswith(f"{debug_mode_str}{constellation}") and res_fname.endswith(".vec"):
            # parse satellite module names from .vec

            with open("./results/" + res_fname, "r") as vec_file:

                for line in vec_file.readlines():
                    if "SatelliteExampleScenario.leo" in line:
                        sat_name = line.split(" ")[2]
                        sat_mods.add(sat_name)
    
    return sat_mods

def formatSatVecCsvFileNames():
    files = list()
    f = ""
    configs_per_constellation = {}
    for constellation in config["tles_prefixes"]:
        configs_per_constellation[constellation] = expand("{optional_Debug}{constellation}-{mobility}", 
                                                        optional_Debug="Debug-" if config["debug_mode"] else "" ,
                                                        constellation=[constellation],
                                                        mobility=config["mobilities"])

    sat_mods_per_constellation = get_sat_mods_per_const()
    
    print(sat_mods_per_constellation)

    for c in configs_per_constellation.keys():
        sat_mods = sat_mods_per_constellation[c]
        for mod in sat_mods:
            for vec in config["sat_vectors"]:
                f = "csv/vectors/" + c + "_" + mod + "_" + vec + ".csv"
                files.append(f)

    return files

def format_constellation_satvec_csvnames(wildcards):
    config_name = wildcards.opp_config
    constellation = config_name.replace("Debug-", "")
    sat_mods = get_const_sat_mods(constellation)
    
    files = []
    for mod in sat_mods:
            for vec in config["sat_vectors"]:
                f = "csv/vectors/" + config_name + "_" + mod + "_" + vec + ".csv"
                files.append(f)
    
    return files
    
rule sat_vec_to_csv_constellation:
    input:
        "runs/{opp_config}_done.txt",
        format_constellation_satvec_csvnames
    output:
        "csv/{opp_config}_vecs.done"
    shell:
        "touch {output}"
