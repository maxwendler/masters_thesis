# SPDX-FileCopyrightText: 
# 2023 Mario Franke <research@m-franke.net>
# 2024 Max Wendler <max.wendler@gmail.com>
#
# SPDX-License-Identifier: GPL-2.0-or-later

import os
import glob
from functools import reduce

configfile: "smk.config.yaml"

#### FUNCTIONS FOR READING PARAM FILES / SMK CONFIG ####

def get_composed_constellations(wildcards=None):
    """
    List of all constellation names created by composing subsets.
    """
    return list(config["constellation_compositions"].keys())

def get_constellation_components(wildcards=None):
    """
    List of all constellation names which will be composed to superconstellations.
    """
    return list(set(reduce(lambda all_comps_list, const_comp_list: all_comps_list + const_comp_list, config["constellation_compositions"].values())))

def get_const_sat_mods(constellation: str):
    """
    Returns module names of satellites of a constellation, parsed from the according TLEs list 
    and converted with satname_to_modname().
    """
    with open("tles/" + constellation + "_modnames", "r") as name_f:
        modnames = [mn.removesuffix("\n") for mn in name_f.readlines()]
    
    return modnames

def quote_strs(strs: list[str]):
    """
    Puts quotes around given strings, as snakemake requires path strings without additional quotes,
    while python scripts occasionally required quoted paths.
    """
    return ['"' + in_str + '"' for in_str in strs]

def get_tles_paths():
    """
    Returns all paths of TLEs lists used according to the current snakemake configuration (-> constellations).

    Used by rule 'update_omnetini'
    """
    tles_fname_prefixes = get_constellation_components()
    tles_fpaths = [] 
    
    for fname in os.listdir("./tles/"):
        if fname.split("_")[0] in tles_fname_prefixes and fname.endswith(".txt"):
            tles_fpaths.append(f'{"tles/" + fname}')
    
    return sorted(tles_fpaths)

def get_avg_sgp4_radii_paths():
    """
    Returns paths of average SGP4 radii for currently configured constellations and location, if they exist.
    """
    constellations = sorted(list(set(get_constellation_components())))
    avg_sgp4_radii_dir = "csv/avg_radii/" + config["location"] + "/"
    if os.path.isdir(avg_sgp4_radii_dir) and config["use_avg_sgp4_radii"]:
        avg_radii_fnames = list(filter(lambda fname: fname.split("-")[0] in constellations, sorted(os.listdir( avg_sgp4_radii_dir ))))
        avg_sgp4_radii_paths = [ ]
        for c in constellations:
            path = None
            for fname in avg_radii_fnames:
                if (c + "-") in fname:
                    path = avg_sgp4_radii_dir + fname
            if path:
                avg_sgp4_radii_paths.append(path)
            else:
                avg_sgp4_radii_paths.append("None")

        return avg_sgp4_radii_paths
    else:
        return ["None"] * len(constellations)

def get_debug_str():
    """
    Function for optionally including 'Debug-' prefix for simulation configuration names,
    when debug_mode is set to true in snakemake config.
    """
    return "Debug-" if config["debug_mode"] else ""

#### SINGULARITY CONTAINER ####

rule buildContainer:
    input:
        "../../singularity/singularity-space_veins.def"
    output:
        "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        singularity build --fakeroot {output} {input}
        """

rule shell:
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        bash
        """

#### DEPENDENCIES ####

rule buildSpaceVeins:
    input:
        "../../Makefile"
    output:
        "../../bin/space_veins_run"
    container:
        "../../singularity/singularity-space_veins.sif"
    threads:
        workflow.cores
    shell:
        """
        make makefiles
        ucc make -j{threads} all
        make bin/space_veins_run
        """

rule cleanSpaceVeins:
    input:
        "../../Makefile"
    container:
        "../../singularity/singularity-space_veins.sif"
    threads:
        1
    shell:
        """
        make cleanall
        """

rule init_conda_bash:
    """
    Ensures conda environment is activated in Singularity container when running scripts with bash -i -c 'python3 [...]'.
    """
    output:
        "../../singularity/conda_initialized.txt"
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        conda init
        echo "conda activate /opt/.conda" >> .bashrc
        touch examples/space_veins/{output}
        """

rule install_conda_pip_deps:
    input:
        "../../singularity/conda_initialized.txt"
    output:
        "../../singularity/conda_pip_deps_done.txt"
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        bash -i -c "pip install --no-cache-dir --upgrade pip && pip install --no-cache-dir tle-tools==0.2.3"
        touch examples/space_veins/{output}
        """

rule download_orekit_data:
    """
    Required for create_traces rule/python script.
    """
    output:
        "orekit-data.zip"
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        cd examples/space_veins/
        bash -i -c "python3 -c 'from orekit.pyhelpers import download_orekit_data_curdir;download_orekit_data_curdir()'"
        """

rule get_modnames:
    """
    Creates file of OMNeT++ module names of a TLE set, so that output files for the corresponding results from OMNeT++ simulation 
    can be requested. Satellite name to module name transformation matches module name creation in SatelliteInserter class. 
    """
    input:
        script="../../scripts/statistics/get_modnames.py",
    output:
        "tles/{constellation}_modnames"
    params:
        # requires that '{constellation}_' prefix is unique to the tle file of the constellation in tles/
        tles_path=lambda wildcards: "tles/" + list(filter(lambda fname: fname.startswith(wildcards.constellation + "_") and fname.endswith(".txt"), os.listdir("tles/")))[0]
    shell:
        "python3 {input.script} {params.tles_path} {output}"

rule setup_modnames_files:
    """
    Execution of get_modnames for all constellations which are not just subconstellations for simulation due to memory limits,
    but desired constellations/subconstellations with certain orbital properties.
    """
    input:
        expand("tles/{constellation}_modnames", constellation=get_composed_constellations())
    output:
        "tles/modnames.done"
    shell:
        "touch {output}"

rule finish_dep_setup:
    input:
        "../../singularity/conda_pip_deps_done.txt",
        "tles/modnames.done",
        "../../bin/space_veins_run",
        "orekit-data.zip"

#### SETTING UP & RUNNING THE SIMULATION ####

rule update_nod_xml:
    input:
        script="../../scripts/utility/update_nod_xml.py",
        nod_template="two-nodes.nod.xml.template"
    output:
        "two-nodes.nod.xml"
    params:
        location_str=lambda wildcards: config["locations_xml"][config["location"]]
    shell:
        "python3 {input.script} {input.nod_template} '{params.location_str}' {output}"

rule update_net_xml:
    input:
        script="../../scripts/createRoadNetwork.sh",
        nod="two-nodes.nod.xml",
        edg="two-nodes.edg.xml"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "two-nodes.net.xml"
    shell:
        """
        cd examples/space_veins
        bash {input.script} {input.nod} {input.edg} {output}
        """

rule update_omnetini:
    """
    Adds debug and non-debug configuration generated from the template at ../../scripts/keplertraces/config_template.txt,
    for the different mobilities and constellation-dependent TLEs list files, trace directories and simulation start times.
    omnetpp.ini.template is overwritten after [Config Debug] section. omnetpp.ini.template contains example configs after [Config Debug] section.
    """
    input:
        script="../../scripts/keplertraces/updateomnetini.py",
        ini_template="omnetpp.ini.template",
        conf_template="../../scripts/keplertraces/config_template.txt",
        tles_paths=get_tles_paths()
    params:
        # as snakemake won't accept filepath strings containing quotes as input
        # but call of python scripts requires them
        quoted_tles_paths= lambda wildcards, input: quote_strs(input.tles_paths),
        sim_time_limit = config["sim-time-limit"],
        avg_sgp4_radii_paths = quote_strs(get_avg_sgp4_radii_paths()),
        location = config["location"]
    output:
        "omnetpp.ini"
    shell:
        """python3 {input.script} {input.ini_template} {input.conf_template} traces/ {params.sim_time_limit} {params.location} --tles_paths {params.quoted_tles_paths} --avg_sgp4_radii_paths {params.avg_sgp4_radii_paths}"""

rule create_traces:
    """
    Creates ITRF traces of a constellation for either the normal or the debug configuration in omnetpp.ini,
    from which parameters are derived.
    """
    input:
        script="../../scripts/keplertraces/create_traces.py",
        ini_path="omnetpp.ini",
        tles_path=lambda wildcards: glob.glob("tles/" + wildcards.constellation + "_*.txt")
    container:
        "../../singularity/singularity-space_veins.sif"
    benchmark:
        "benchmarks/{constellation}_traces.benchmark.txt"
    params:
        configname=lambda wildcards: expand("{optional_Debug}{constellation}-kepler", 
                                        optional_Debug="Debug-" if config["debug_mode"] else "",
                                        constellation=wildcards.constellation),
    output:
        "traces/{constellation}_traces.done"
    shell:
        """
        cd examples/space_veins
        bash -i -c "python3 {input.script} {input.ini_path} {input.tles_path} traces/ -c {params.configname} -i -o"
        date +%Y%m%d%H%M%S > {output}
        """

def get_trace_requirement(wildcards):
    """
    Returns traces as input requirement for rule createRunFile only for Kepler configurations. 
    """
    if "kepler" in wildcards.oppConfig:
        config_str = wildcards.oppConfig
        constellation = config_str.replace("Debug-","").split("-")[0]
        return "traces/" + constellation + "_traces.done"
    else: 
        return []

rule createRunFile:
    """
    Creates run files to run simulations with runmaker
    """
    input:
        # only require trace files for Kepler-orbit-based runs
        # ---
        # placed here instead of in rule 'run' so that run file is regenerated with more recent traces
        # otherwise, run file still has run marked as 'd' = done
        get_trace_requirement,
        "omnetpp.ini"
    output:
        "runs/" + "{location}" + "_{oppConfig}_runs.txt"
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        cd examples/space_veins
        perl ../../lib/veins_scripts/running/generateRunsFile.pl {wildcards.oppConfig} > {output}
        """

rule createRunmakerLogFile:
    """
    Creates .log file for running simulations with runmaker.
    """
    output:
        "runs/" + config["location"] + "_{oppConfig}_runs.log"
    shell:
        "touch {output}"

rule run:
    """
    Runs OMNeT++ simulation for a configuration from omnetpp.ini.
    """
    input:
        net_xml="two-nodes.net.xml",
        logFile="runs/" + config["location"] + "_" + get_debug_str() + "{const_comp}-{mobility}_runs.log",
        runFile="runs/" + config["location"] + "_" + get_debug_str() + "{const_comp}-{mobility}_runs.txt"
    output:
        "runs/" + config["location"] + "_" + get_debug_str() + "{const_comp}-{mobility}_done.txt",
    threads:
        1
    benchmark:
        "benchmarks/" + config["location"] + "_{const_comp}-{mobility}_run.benchmark.txt"
    container:
       "../../singularity/singularity-space_veins.sif"
    shell:
        """
        cd examples/space_veins
        python3 ../../lib/runmaker/runmaker4.py --jobs={threads} -l {input.logFile} --loglines=200 {input.runFile} 
        date +%Y%m%d%H%M%S > {output}
        """

#### RUNTIME METRICS ####
# calculating total runtime of rules create_traces (Kepler mobility only) and run

def get_const_comp_benchmarks(wildcards):
    """
    Collects paths of relevant benchmark files.
    """
    constellation_components = config["constellation_compositions"][wildcards.constellation]
    benchmark_paths = []
    benchmark_paths += expand("benchmarks/" + config["location"] +"_{const_comp}-{mobility}_run.benchmark.txt", const_comp=constellation_components, mobility=wildcards.mobility)
    if wildcards.mobility == "kepler":
        benchmark_paths += expand("benchmarks/{const_comp}_traces.benchmark.txt", const_comp=constellation_components)
    return benchmark_paths

rule calc_runtime:
    """
    Total runtime per location-constellation pair.
    """
    input:
        script="../../scripts/statistics/runtime_from_benchmarks.py",
        benchmarks=get_const_comp_benchmarks
    output:
        "stats/runtime/" + config["location"] + "_{constellation}_{mobility}_runtime.txt"
    shell:
        "python3 {input.script} {output} {input.benchmarks}"

#### EXTRACTING COORDINATE DATA ####

def format_coord_vectors(wildcards):
    """
    Determines coordinate vectors that should be written from simulation results to a CSV by "../../lib/veins_scripts/eval/opp_vec2csv.pl",
    depending on coordinate frame requested for rule vec2csv.
    """
    if (wildcards.coordframe == "wgs84"):
        return ("--list -F " + "wgs84CoordLat:vector=wgs84CoordLat_vector" +
                                " -F wgs84CoordLon:vector=wgs84CoordLon_vector " +
                                " -F wgs84CoordAlt:vector=wgs84CoordAlt_vector")
    elif (wildcards.coordframe == "itrf"):
        return ("--list -F " + "itrfCoordX:vector=itrfCoordX_vector" +
                                " -F itrfCoordY:vector=itrfCoordY_vector" +
                                " -F itrfCoordZ:vector=itrfCoordZ_vector")
    elif (wildcards.coordframe == "omnet"):
        return ("--list -F " + "omnetCoordX:vector=omnetCoordX_vector" +
                                " -F omnetCoordY:vector=omnetCoordY_vector" +
                                " -F omnetCoordZ:vector=omnetCoordZ_vector")
    elif (wildcards.coordframe == "teme"):
        return ("--list -F " + "temeCoordX:vector=temeCoordX_vector" +
                                " -F temeCoordY:vector=temeCoordY_vector" +
                                " -F temeCoordZ:vector=temeCoordZ_vector")
    else:
        raise ValueError(f"coordinate frame {wildcards.coordframe} is not supported for csv results")

rule vec2csv:
    """
    Parses coordinate vectors from simulation results to a 3D-coordinate CSV for specified coordinate frame.
    Uses ../../scripts/time_sort_csv.py to sort after (1) satellite module and (2) simulation time.
    """
    input:
        "runs/" + config["location"] + "_" + get_debug_str() + "{constellation}-{mobility}_done.txt",
        sort_script="../../scripts/utility/time_sort_csv.py"
    output:
        "csv/vector_components/{location}_{constellation}-{mobility}_{coordframe}_sorted.csv"
    params:
        vectors=format_coord_vectors,
        moduleRegex='^SatelliteExampleScenario\.leo',
        unsorted_path="csv/vector_components/{location}_{constellation}-{mobility}_{coordframe}.csv",
        vec_file = lambda wildcards: "results/" + wildcards.constellation + "-" + wildcards.mobility + "-warmupPeriod=15,simTimeLimit=" + str(config["sim-time-limit"]) + "," + "location=" + config["location"] + "*.vec"
    resources:
        mem_mb=lambda wildcards: config["mem_mb_limits"][wildcards.constellation]
    threads:
        1
    shell:
        """
        perl ../../lib/veins_scripts/eval/opp_vec2csv.pl -v -m emt -M {params.moduleRegex} {params.vectors} {params.vec_file} > {params.unsorted_path}
        python3 {input.sort_script} {params.unsorted_path}  
        rm {params.unsorted_path}
        """

def get_csvs_to_compose(wildcards):
    """
    Returns paths of constellation coord result CSVs which need to be combined for a composed constellation.
    """
    constellation = wildcards.composed_constellation
    is_atom = constellation in get_constellation_components() 
    const_components = [constellation] if is_atom else config["constellation_compositions"][constellation]
    in_csvs = []
    for const_comp in const_components:
        in_csvs.append(f"csv/vector_components/{wildcards.location}_{const_comp}-{wildcards.mobility}_{wildcards.coordframe}_sorted.csv")
    return in_csvs

def get_other_location_coord_csv(wildcards):
    """
    As TEME and ITRF coords are same w.r.t. any surface location, returns path of file for constellation-mobility combination
    if it exists.
    """
    if not os.path.isdir("csv/vectors"):
        return None

    if wildcards.coordframe in ["teme", "itrf"]:
        
        mobility_coordframe_csvs_suffix = wildcards.composed_constellation + "-" + wildcards.mobility + "_" + wildcards.coordframe + "_sorted.csv"
        all_locations_mobility_coordframe_csv_fnames = list(filter(lambda fname: fname.endswith(mobility_coordframe_csvs_suffix) and not fname.startswith(wildcards.location), os.listdir("csv/vectors/")))
        
        if len(all_locations_mobility_coordframe_csv_fnames) > 0:
            for fname in all_locations_mobility_coordframe_csv_fnames:
                if not os.path.islink("csv/vectors/" + fname):
                    return "csv/vectors/" + fname
    return None

def get_compose_csvs_inputs(wildcards):
    """
    Either returns path of CSV which can be copied for TEME/ITRF coordinates if it exists,
    or the paths of result CSVs which need to be composed to create output of compose_csvs.
    """
    other_location_coord_csv = get_other_location_coord_csv(wildcards)
    if other_location_coord_csv:
        return (True, other_location_coord_csv)
    else:
        return (False, get_csvs_to_compose(wildcards))

def get_compose_csvs_shell(input, copy_other_location: bool, wildcards, output):
    """
    Returns shell commands to either (1) Copy other ITRF/TEME coord CSV of other location,
    (2) Copy CSV from csv/vector_components, if no subconstellations of desired output exist, or
    (3) Run compose_pos_csvs.py to combine files from csv/vector_components.
    """
    in_csvs = input.in_csvs
    if copy_other_location:
        other_location_coord_csv = in_csvs
        return f"ln {other_location_coord_csv} csv/vectors/{wildcards.location}_{wildcards.composed_constellation}-{wildcards.mobility}_{wildcards.coordframe}_sorted.csv && touch {output}"
    elif len(in_csvs) == 1:
        return f"ln {in_csvs[0]} csv/vectors/{wildcards.location}_{wildcards.composed_constellation}-{wildcards.mobility}_{wildcards.coordframe}_sorted.csv && touch {output}"
    else:
        return f"python3 {input.script} {output} {input.in_csvs}"

rule compose_pos_csvs:
    """
    Either (1) Copies other ITRF/TEME coord CSV of other location,
    (2) Copies CSV from csv/vector_components, if no subconstellations of desired output exist, or
    (3) Runs compose_pos_csvs.py to combine files from csv/vector_components.
    """
    input:
        script="../../scripts/utility/compose_pos_csvs.py",
        in_csvs=lambda wildcards: get_compose_csvs_inputs(wildcards)[1]
    output:
        "csv/vectors/{location}_{composed_constellation}-{mobility}_{coordframe}_sorted.csv"
    params:
        shell = lambda wildcards, input, output: get_compose_csvs_shell(input, get_compose_csvs_inputs(wildcards)[0], wildcards, output)
    resources:
        # sum of component job mem_mb limit / 3, as input csv only contains one of 3 result coordinate frames
        mem_mb = lambda wildcards, input: 10 if get_compose_csvs_inputs(wildcards)[0] or len(input.in_csvs) == 1 else sum( map(lambda const_comp: config["mem_mb_limits"][const_comp], config["constellation_compositions"][wildcards.composed_constellation])) / 3
    shell:
        "{params.shell}"

#### SETUP OPTIONAL CIRCULAR PARAMS FROM SGP4 RESULTS ####

def get_deactivated_locations(wildcards):
    """
    See rule avg_sgp4_radii.
    """
    locations = ["sofia", "quito", "kunlun"]
    locations.remove(wildcards.location)
    return locations

def get_other_locations_avg_radii_hardlink_commands(wildcards):
    """
    See rule avg_sgp4_radii.
    """
    other_locations = get_deactivated_locations(wildcards)
    os.makedirs(f"csv/avg_radii/{other_locations[0]}", exist_ok=True)
    os.makedirs(f"csv/avg_radii/{other_locations[1]}", exist_ok=True)
    shell_str = f"ln csv/avg_radii/{wildcards.location}/{wildcards.constellation}-sgp4_teme_avg_radii.csv csv/avg_radii/{other_locations[0]}/{wildcards.constellation}-sgp4_teme_avg_radii.csv"
    shell_str += " && "
    shell_str += f"ln csv/avg_radii/{wildcards.location}/{wildcards.constellation}-sgp4_teme_avg_radii.csv csv/avg_radii/{other_locations[1]}/{wildcards.constellation}-sgp4_teme_avg_radii.csv"
    return shell_str

rule avg_sgp4_radii:
    """
    Calculates average SGP4 TEME radii of a constellation for a specific location and copies
    the result to path used for other locations.
    """
    input:
        script="../../scripts/statistics/avg_sgp4_radii.py",
        sgp4_teme_csv="csv/vectors/{location}_{constellation}-sgp4_teme_sorted.csv"
    output:
        "csv/avg_radii/{location}/{constellation}-sgp4_teme_avg_radii.csv"
    params:
        other_locations_hardlink_commands = lambda wildcards: get_other_locations_avg_radii_hardlink_commands(wildcards)
    shell:
        "python3 {input.script} {input.sgp4_teme_csv} {output} && {params.other_locations_hardlink_commands}"


rule all_avg_sgp4_radii:
    """
    Calculate average SGP4 radii of all constellations.
    """
    input:
        lambda wildcards: expand("csv/avg_radii/{location}/{constellation}-sgp4_teme_avg_radii.csv", location=config["location"], constellation=get_constellation_components(wildcards))

"""
RULES FOR PLOTTING SATELLITE ORBITS
"""

rule satmod_csv:
    """
    Writes 3D coordinates in the specified coordinate frame for the specified satellite module of the specified OMNeT configuration
    to an individual CSV file.
    """
    input:
        script="../../scripts/utility/to_sat_csv.py",
        in_csv="csv/vectors/{location}_{opp_config}_{coord_frame}_sorted.csv"
    output:
        "csv/vectors/satmod/{location}/{opp_config}_{coord_frame}_{leo_modname}.csv"
    shell:
        "python3 {input.script} {input.in_csv} '{wildcards.leo_modname}' > '{output}'"

def get_satmod_csv_paths(wildcards, same_config=True):
    """
    Returns the paths of the CSVs of individual 3D coordinate for the satellite modules of the wildcards list "leo_modnames" of the specified constellation,
    for the specified coordinate frame and either one or two OMNeT configurations, for (1) plotting orbits of one mobility and (2) comparative plot of the 
    orbits of two mobilities.
    """    
    leo_modnames = wildcards.leo_modnames.split("+")

    # one config (= one mobility) -> one csv per satmod 
    if same_config:
        base_path = "csv/vectors/satmod/" + wildcards.location + "/" + wildcards.opp_config + "_" + wildcards.coord_frame + "_"
        return [(base_path + modname + ".csv") for modname in leo_modnames]

    # two configs (= two mobilities) -> two csvs per satmod 
    else:
        mob1_config_str = get_debug_str() + wildcards.constellation + "-" + wildcards.mobility1
        mob2_config_str = get_debug_str() + wildcards.constellation + "-" + wildcards.mobility2
        mob1_base_path = "csv/vectors/satmod/" + wildcards.location + "/" + mob1_config_str + "_" + wildcards.coord_frame + "_"
        mob2_base_path = "csv/vectors/satmod/" + wildcards.location + "/" + mob2_config_str + "_" + wildcards.coord_frame + "_"
        return [(mob1_base_path + modname + ".csv") for modname in leo_modnames] + [(mob2_base_path + modname + ".csv") for modname in leo_modnames]
    
rule plot_orbs_of_mobility:
    """
    Creates interactive plot of the orbits of the specified "leo_modnames" for the given coordinate frame and OMNeT configuration.
    """
    input:
        script="../../scripts/plots/plot_orbs.py",
        coord_paths=get_satmod_csv_paths
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/orbs/mobility/{location}/{opp_config}_{coord_frame}_{leo_modnames}.html"
    params:
        csv_paths= lambda wildcards, input: quote_strs(input.coord_paths)
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} -c {params.csv_paths} -o '{output}' -e'
        """

rule plot_orbs_of_mobilities:
    """
    Creates interactive plot of the orbits of the specfiied "leo_modnames" for the given coordinate frame, with one orbit per satellite module
    for both mobilities. I.e. enables visual comparison of orbits.
    """
    input:
        script="../../scripts/plots/plot_orbs.py",
        coord_paths=lambda wildcards: get_satmod_csv_paths(wildcards, False),
        tle_times="tles/{constellation}_times.json"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/orbs/mobilities/{location}/" + get_debug_str() + "{constellation}_{coord_frame}_{mobility1}-{mobility2}_{leo_modnames}.html"
    params:
        csv_paths= lambda wildcards, input: quote_strs(input.coord_paths),
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.tle_times} -c {params.csv_paths} -o "{output}" -e'
        """

#### CALCULATE & PLOT POSITIONAL DIFFERENCES BETWEEN MODELS ###

rule all_positional_metrics:
    """
    Everything which can be requested as output for positional deviations for the current location
    and all configured constellations - ECDF plots not included 
    It is not recommended to actually request everything. 
    Details on the individual outputs can be found in the respective rules.
    """
    input:
        #plot pos diff / poss diff distr stats separately when desired, are not included here
        #expand("plots/pos_diff/{location}/{constellation}/{coord_frame}_sgp4-kepler_distances.done",
        #        location=config["location"], 
        #        constellation=get_composed_constellations(), 
        #        coord_frame=["omnet"]),
        #expand("plots/pos_diff/{location}/{constellation}/{coord_frame}_sgp4-circular_distances.done",
        #        location=config["location"], 
        #        constellation=get_composed_constellations(), 
        #        coord_frame=["omnet"]),
        expand("plots/pos_diff/{location}/{constellation}/{coord_frame}_sgp4-kepler-circular_distances.done",
                location=config["location"], 
                constellation=config["low_level_constellations"], 
                coord_frame=["omnet"]),        
        expand("plots/pos_diff_distr/{location}/" + get_debug_str() + "{constellation}_{coord_frame}_sgp4-kepler_sum-histogram.svg",
                location=config["location"], 
                constellation=get_composed_constellations(), 
                coord_frame=["omnet"]),
        expand("plots/pos_diff_distr/{location}/" + get_debug_str() + "{constellation}_{coord_frame}_sgp4-circular_sum-histogram.svg",
                location=config["location"], 
                constellation=get_composed_constellations(), 
                coord_frame=["omnet"]),
        #expand("plots/pos_diff_diffs/{location}/{constellation}/" + get_debug_str() + "itrf2omnet_sgp4-{mobility2}_distances.done",
        #        location=config["location"], 
        #        constellation=config["low_level_constellations"], 
        #        mobility2=["kepler"])
    output:
        "stats/pos_metrics.done"
    shell:
        "touch {output}"

rule calc_pos_diffs:
    """
    Calculates differences between 3D coordinate CSVs of the two specified mobilities and the specified coordinate frame, 
    and outputs them to new CSV, with satellite module name + list of differences at sim. second per row.
    """
    input:
        script="../../scripts/statistics/positional_differences.py",
        mob1_csv="csv/vectors/{location}_{constellation}-sgp4_{coord_frame}_sorted.csv",
        mob2_csv="csv/vectors/{location}_{constellation}-{mobility2}_{coord_frame}_sorted.csv"
    output:
        "csv/pos_diff/{location}/" + get_debug_str() + "{constellation}/{coord_frame}_sgp4-{mobility2}_differences.csv"
    shell:
        "python3 {input.script} {input.mob1_csv} {input.mob2_csv} {wildcards.coord_frame} {output}"

def get_tle_path(constellation: str):
    """
    Returns path of TLEs list in tles/ for given constellation, which should start with given
    constellation name. For options see config -> constellations.

    Used by rule 'calc_tle_times.' 
    """
    for fname in os.listdir("./tles/"):
        if fname.startswith(constellation + "_") and fname.endswith(".txt"):
            return "tles/" + fname

rule calc_tle_times:
    """
    Creates JSON with start time as well as epochs of a TLEs list in numpy datetime64 format,
    as well as the offset of each epoch to the start time in days. 
    """
    input:
        script="../../scripts/keplertraces/tletimes.py",
        tles=lambda wildcards: get_tle_path(wildcards.constellation)
    output:
        "tles/{constellation}_times.json"
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        "cd examples/space_veins && bash -i -c 'python3 {input.script} {input.tles}'"

rule plot_pos_diffs_with_ecdf:
    """
    Creates coordinate euclidian distance line plot for the two specified mobilities, coordinate frame, and satellite module,
    as well as ECDF plot of distances. 
    """
    input:
        script="../../scripts/plots/plot_differences.py",
        tle_times="tles/{constellation}_times.json",
        in_csv="csv/pos_diff/{location}/" + get_debug_str() + "{constellation}/{coord_frame}_sgp4-{mobility2}_differences.csv"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/pos_diff/{location}/{constellation}/"+ get_debug_str() + "{coord_frame}_sgp4-{mobility2}_{leo_modname}_distances_with_ecdf.svg"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.in_csv} "{wildcards.leo_modname}" {input.tle_times} "{output}" --ecdf'
        """

rule plot_kepler_and_circular_pos_diffs:
    """
    Creates coordinate euclidian distance line plot of the circular and Keplerian model mobilities to SGP4 for 
    the specified coordinate frame, and satellite module. 
    """
    input:
        script="../../scripts/plots/plot_differences.py",
        tle_times="tles/{constellation}_times.json",
        kepler_csv="csv/pos_diff/{location}/" + get_debug_str() + "{constellation}/omnet_sgp4-kepler_differences.csv",
        circular_csv="csv/pos_diff/{location}/" + get_debug_str() + "{constellation}/omnet_sgp4-circular_differences.csv"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/pos_diff/{location}/{constellation}/"+ get_debug_str() + "omnet_sgp4-kepler-circular_{leo_modname}_distances.svg"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.kepler_csv} "{wildcards.leo_modname}" {input.tle_times} "{output}" --comparison_csv {input.circular_csv}'
        """

def get_kepler_circular_pos_diff_plots(wildcards):
    """
    Return paths of all Kepler+Circular - to - SPG4 plots of a constellation and location.
    """
    return expand("plots/pos_diff/{location}/{constellation}/"+ get_debug_str() + "omnet_sgp4-kepler-circular_{leo_modname}_distances.svg",
            location=wildcards.location,
            constellation=wildcards.constellation, 
            leo_modname=get_const_sat_mods(wildcards.constellation))

rule plot_const_kepler_and_circular_pos_diffs:
    """
    Plot all Kepler+Circular - to - SPG4 plots of a constellation and location.
    """
    input:
        get_kepler_circular_pos_diff_plots
    output:
        "plots/pos_diff/{location}/{constellation}/" + get_debug_str() + "omnet_sgp4-kepler-circular_distances.done"
    shell:
        "touch {output}"
    

def get_const_pos_diff_paths(wildcards):
    """
    Returns all paths of 3D coordinate difference plots of the constellation, coordframe and the two mobilities specified in wildcards.
    """
    return expand("plots/pos_diff/{location}/{constellation}/" + get_debug_str() + "{coord_frame}_sgp4-{mobility2}_{leo_modname}_distances_with_ecdf.svg",
                location=wildcards.location,
                constellation=wildcards.constellation, 
                coord_frame=wildcards.coord_frame, 
                mobility2=wildcards.mobility2,
                leo_modname=get_const_sat_mods(wildcards.constellation),
                with_or_without_ecdf=["_with_ecdf"]
            )

rule plot_const_pos_diffs:
    """
    Plots all line plots of 3D coordinate differences for the specified two mobilities and coordinate frame, with ECDF plots.
    """
    input:
        get_const_pos_diff_paths
    output:
        "plots/pos_diff/{location}/{constellation}/" + get_debug_str() + "{coord_frame}_sgp4-{mobility2}_distances.done"
    shell:
        "touch {output}"

rule plot_diff_distributions:
    """
    Plots sum histogram plot and box plot for the 3D coordinate differences of all satellite modules of the given constellation,
    for the specified two mobilities and coordinate frame.  
    """
    input:
        script="../../scripts/plots/plot_difference_distributions.py",
        in_csv="csv/pos_diff/{location}/" + get_debug_str() + "{constellation}/{coord_frame}_sgp4-{mobility2}_differences.csv"
    output:
        "plots/pos_diff_distr/{location}/" + get_debug_str() + "{constellation}_{coord_frame}_sgp4-{mobility2}_sum-histogram.svg",
        "plots/pos_diff_distr/{location}/" + get_debug_str() + "{constellation}_{coord_frame}_sgp4-{mobility2}_sum-histogram.html",
        "plots/pos_diff_distr/{location}/" + get_debug_str() + "{constellation}_{coord_frame}_sgp4-{mobility2}_avg_difference.json"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        output_basepath="plots/pos_diff_distr/{location}/" + get_debug_str() + "{constellation}_{coord_frame}_sgp4-{mobility2}_"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.in_csv} {params.output_basepath}'
        """

rule calc_pos_diff_diffs_itrf_omnet:
    """
    Calculates the differences of the differences of 3D coordinates between the ITRF and OMNeT coordinate frame for the specified two mobilities and constellation.
    """
    input:
        "csv/pos_diff/{location}/" + get_debug_str() + "{constellation}/itrf_sgp4-{mobility2}_differences.csv",
        "csv/pos_diff/{location}/" + get_debug_str() + "{constellation}/omnet_sgp4-{mobility2}_differences.csv",
        script="../../scripts/statistics/diff_differences.py"
    output:
        "csv/pos_diff_diffs/{location}/" + get_debug_str() + "{constellation}_itrf2omnet_sgp4-{mobility2}_differences.csv" 
    shell:
        "python3 {input.script} '{input[0]}' '{input[1]}' > {output}"

rule plot_pos_diff_diffs:
    """
    Line plot of differences of between-model distances in ITRF and ENU/OMNeT++ coordinates, 
    for the specified constellation and satellite module name.
    """
    input:
        script="../../scripts/plots/plot_differences.py",
        in_csv="csv/pos_diff_diffs/{location}/" + get_debug_str() + "{constellation}_itrf2omnet_sgp4-{mobility2}_differences.csv",
        tle_times='tles/{constellation}_times.json'
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/pos_diff_diffs/{location}/" + "{constellation}/"+ get_debug_str() + "itrf2omnet_{mobility2}-sgp4_{leo_modname}_distances.svg"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.in_csv} "{wildcards.leo_modname}" {input.tle_times} "{output}"'
        """

rule plot_kepler_circular_pos_diff_diffs:
    """
    Creates line plot the differences of the differences of 3D coordinates between the ITRF and OMNeT++/ENU coordinate frame for 
    Keplerian and circular model w.r.t. SGP4 for the specified constellation and satellite module name.
    """
    input:
        script="../../scripts/plots/plot_differences.py",
        kepler_csv="csv/pos_diff_diffs/{location}/" + get_debug_str() + "{constellation}_itrf2omnet_sgp4-kepler_differences.csv",
        circular_csv="csv/pos_diff_diffs/{location}/" + get_debug_str() + "{constellation}_itrf2omnet_sgp4-circular_differences.csv",
        tle_times='tles/{constellation}_times.json'
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/pos_diff_diffs/{location}/" + "{constellation}/"+ get_debug_str() + "itrf2omnet_sgp4-kepler-circular_{leo_modname}_distances.svg"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.kepler_csv} "{wildcards.leo_modname}" {input.tle_times} "{output}" --comparison_csv {input.circular_csv}'
        """

def get_const_pos_diff_diffs_paths(wildcards):
    """
    Returns all paths for line plots of differences of the differences of 3D coordinates between the ITRF and OMNeT coordinate frame for the specified two mobilities and constellation. 
    """
    paths = expand("plots/pos_diff_diffs/{location}/{constellation}/" + get_debug_str() + "itrf2omnet_sgp4-kepler-circular_{leo_modname}_distances.svg",
                location=wildcards.location,
                constellation=wildcards.constellation,   
                leo_modname=get_const_sat_mods(wildcards.constellation)) + expand(
                "plots/pos_diff_diffs/{location}/{constellation}/" + get_debug_str() + "itrf2omnet_{mobility2}-sgp4_{leo_modname}_distances.svg",
                location=wildcards.location,
                constellation=wildcards.constellation,
                mobility2=["kepler","circular"],   
                leo_modname=get_const_sat_mods(wildcards.constellation))
    return paths

rule plot_const_pos_diff_diffs:
    """
    Plots all plots of differences of the differences of 3D coordinates between the ITRF and OMNeT coordinate frame for the specified two mobilities.
    """
    input:
        get_const_pos_diff_diffs_paths
    output:
        "plots/pos_diff_diffs/{location}/{constellation}/" + get_debug_str() + "itrf2omnet_sgp4-kepler-circular_distances.done"
    shell:
        "touch {output}"

rule plot_extrema_zs:
    """
    Plots z coordinates of between-model distance extrema in specified coordinate frame 
    for specified location, constellation and two mobilites.
    """
    input:
        script="../../scripts/plots/plot_const_diff_extrema_positions.py",
        tles=lambda wildcards: get_tle_path(wildcards.constellation),
        diff_csv="csv/pos_diff/{location}/{constellation}/omnet_sgp4-{mob2}_differences.csv",
        mob1_pos_csv="csv/vectors/{location}_{constellation}-sgp4_{coord_frame}_sorted.csv",
        mob2_pos_csv="csv/vectors/{location}_{constellation}-{mob2}_{coord_frame}_sorted.csv"
    params:
        output_basepath="plots/pos_diff_extrema/{location}/{constellation}_{coord_frame}_sgp4-{mob2}_"
    output:
        "plots/pos_diff_extrema/{location}/{constellation}_{coord_frame}_sgp4-{mob2}_max_min_zs.svg",
        "plots/pos_diff_extrema/{location}/{constellation}_{coord_frame}_sgp4-{mob2}_max_min_coords.txt",
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {wildcards.constellation} {input.tles} {input.diff_csv} {input.mob1_pos_csv} {wildcards.mob1} {input.mob2_pos_csv} {wildcards.mob2} {params.output_basepath}'
        """

rule const_pos_diff_fit:
    """
    Creates line fits for between-model distances, separately for backward and forward propagation,
    of the specified mobility w.r.t. SGP4 for specified location and the modules of the specified constellation.
    For explanation of the result data, see pages 66-73 of the thesis PDF or comments in the used Python script. 
    """
    input:
        script="../../scripts/statistics/pos_diff_fit.py",
        pos_diffs="csv/pos_diff/{location}/{constellation}/omnet_sgp4-{mob2}_differences.csv",
        tle_times="tles/{constellation}_times.json"
    output:
        "stats/pos_diff_fits/{location}/{constellation}_omnet_sgp4-{mob2}_differences_linefits.json"
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.pos_diffs} {input.tle_times} {output}'
        """

rule const_worst_case_pos_diffs:
    """
    Calculate worst-case between-model distances in backward and forward propagation.
    """
    input:
        script="../../scripts/statistics/worst_case_estimates.py",
        pos_diffs="csv/pos_diff/{location}/{constellation}/omnet_sgp4-{mob2}_differences.csv",
        tle_times="tles/{constellation}_times.json"
    output:
        "stats/pos_diff_worst_case/{location}/{constellation}_omnet_sgp4-{mob2}_differences_worst_case.json"
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.pos_diffs} {input.tle_times} {output}'
        """

#### RULES TO CALCULATE AND PLOT METRICS RELATIVE TO SOP ####

rule all_sop_metrics:
    """
    Everything which can be requested as output for data calculated w.r.t. the SOP for the current location,
    and all configured constellations - which is not data of availability/communication periods.
    It is not recommended to actually request everything. 
    Details on the individual outputs can be found in the respective rules.
    """
    input:
        # plot when necessary
        #expand("plots/sop/{location}/{constellation}/sgp4-{new_mobility}_angles_distances_delays.done",
        #        location=config["location"],
        #        constellation=get_composed_constellations(),
        #        new_mobility=["kepler", "circular"]),
        #expand("plots/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_angles_distances_delays.done",
        #        location=config["location"],
        #        constellation=get_composed_constellations(),
        #        new_mobility=["kepler", "circular"]),
        expand("stats/local_aligned_sop_diffs/{location}/{constellation}.done",
                location=config["location"],
                constellation=get_composed_constellations()),
        #expand("plots/aligned_sop_diffs/{location}/{constellation}.done",
        #        location=config["location"],
        #        constellation=get_composed_constellations()),
        expand("plots/aligned_sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_all_{stat}_{avg_or_max}_differences.svg",
                location=config["location"],
                constellation=get_composed_constellations(),
                new_mobility=["kepler", "circular"],
                stat=["delay", "angle"],
                avg_or_max=["avg"]),
        #expand("plots/grouped_aligned_delay_diffs/{location}/{constellation}/sgp4-{new_mobility}.done",
        #        location=config["location"],
        #        constellation=get_composed_constellations(),
        #        new_mobility=["kepler", "circular"]),
    output:
        "stats/sop.done"
    shell:
        "touch {output}"

rule calc_sop_stats:
    """
    Calculates elevation angles, distances and delays to SOP at OMNeT coordinate 0.025,0.025,0 for the specified OMNeT configuration and outputs them
    to individual CSVs. In the CSVs, each row is a satellite module name + the list of values for each simulation second.
    """
    input:
        in_csv="csv/vectors/{location}_{oppConfig}_omnet_sorted.csv",
        script="../../scripts/statistics/sop_stats.py"
    output:
        "csv/sop/{location}_{oppConfig}_distances.csv",
        "csv/sop/{location}_{oppConfig}_angles.csv",
        "csv/sop/{location}_{oppConfig}_delays.csv"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        output_dir="csv/sop/",
        min_angle=config["min_elev_angle"]
    shell:
        """
        cd examples/space_veins/ 
        bash -i -c 'python3 {input.script} {input.in_csv} 0.025 0.025 0 {params.output_dir} -e {params.min_angle}'
        """

rule plot_sop_stats:
    """
    Plots elevation angles, distances and delays to SOP for specified constellation for SGP4 and Kepler mobility and the specified constellation and satellite module name.
    """
    input:
        script="../../scripts/plots/plot_sop_stats.py",
        tle_times="tles/{constellation}_times.json",
        angle_csvs=lambda wildcards: expand("csv/sop/{location}_" + "{constellation}-{mobility}_angles.csv",
                                    location=wildcards.location,
                                    constellation=wildcards.constellation,
                                    mobility=["sgp4", wildcards.new_mobility]),
        dist_csvs=lambda wildcards: expand("csv/sop/{location}_" + "{constellation}-{mobility}_distances.csv",
                                    location=wildcards.location,
                                    constellation=wildcards.constellation,
                                    mobility=["sgp4", wildcards.new_mobility]),
        delay_csvs=lambda wildcards: expand("csv/sop/{location}_" + "{constellation}-{mobility}_delays.csv",
                                    location=wildcards.location,
                                    constellation=wildcards.constellation,
                                    mobility=["sgp4", wildcards.new_mobility])
    output:
        "plots/sop/{location}/" + "{constellation}/sgp4-{new_mobility}_{modname}_angles_distances_delays.html",
        "plots/sop/{location}/" + "{constellation}/sgp4-{new_mobility}_{modname}_angles_distances_delays.svg"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        output_base_path = "plots/sop/{location}/{constellation}/sgp4-{new_mobility}_{modname}_angles_distances_delays",
        min_angle = config["min_elev_angle"]
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} "{wildcards.modname}" --angles_csv_paths {input.angle_csvs} --distances_csv_paths {input.dist_csvs} --delays_csv_paths {input.delay_csvs} --min_angle {params.min_angle} --tle_times_path {input.tle_times} "{params.output_base_path}" --formats svg html'
        """

def get_const_sop_stats_plot_paths(wildcards):
    """
    Returns all the paths of elevation angles + delays + distances to SOP plots for SGP4 and Kepler mobility for the specified constellation.
    """
    return expand("plots/sop/{location}/{constellation}/sgp4-{new_mobility}_{modname}_angles_distances_delays.{format}",
                location=wildcards.location,
                constellation=wildcards.constellation,  
                modname=get_const_sat_mods(wildcards.constellation),
                new_mobility=wildcards.new_mobility,
                format=["svg", "html"])

rule plot_const_sop_stats:
    """
    Plots all elevation angles + delays + distances to SOP plots for SGP4 and Kepler mobility for the specified constellation.
    """
    input:
        get_const_sop_stats_plot_paths
    output:
        "plots/sop/{location}/{constellation}/sgp4-{new_mobility}_angles_distances_delays.done"
    shell:
        "touch {output}"

rule calc_sop_stat_diffs:
    """
    Calculates differences or changes for elevation angles, distances or delays ('stat') relative to SOP for the specified reference mobility, 
    alternative (new) mobility and constellation and outputs them to a new CSV.
    In the CSV, each row is a satellite module name + the list of values for each simulation second.
    """
    input:
        script="../../scripts/statistics/sop_stat_differences.py",
        ref_mobility_csv="csv/sop/{location}_{constellation}-sgp4_{stat}.csv",
        new_mobility_csv="csv/sop/{location}_{constellation}-{new_mobility}_{stat}.csv"
    output:
        "csv/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_{stat}_{diffs_or_changes}.csv"
    params:
        change_option=lambda wildcards: "-c" if wildcards.diffs_or_changes == "changes" else ""
    shell:
        "python3 {input.script} {input.ref_mobility_csv} {input.new_mobility_csv} {output} {params.change_option}"

rule plot_sop_stat_diffs:
    """
    Plots line plots of differences or changes for elevation angles, distances and delays relative to SOP for the specified reference mobility,
    alternative (new) mobility, constellation and satellite module name. The plots span the whole simulation time.   
    """
    input:
        script="../../scripts/plots/plot_sop_stat_differences.py",
        angles_csv="csv/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_angles_{diffs_or_changes}.csv",
        distances_csv="csv/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_distances_{diffs_or_changes}.csv",
        delays_csv="csv/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_delays_{diffs_or_changes}.csv"
    output:
        "plots/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}_full.html",
        svg_out="plots/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}_full.svg"
    params:
        change_option=lambda wildcards: "-c" if wildcards.diffs_or_changes == "changes" else ""
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.angles_csv} {input.distances_csv} {input.delays_csv} 15 "{wildcards.modname}" "{output.svg_out}" {params.change_option}'
        """

rule plot_local_sop_stat_diffs:
    """
    Plots line plots of differences or changes for elevation angles, distances and delays relative to SOP for the specified reference mobility,
    alternative (new) mobility, constellation and satellite module name. The plots only show overlapping and unmatched communication periods of both
    mobilities. 
    """
    input:
        script="../../scripts/plots/plot_sop_stat_differences.py",
        angles_csv="csv/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_angles_{diffs_or_changes}.csv",
        distances_csv="csv/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_distances_{diffs_or_changes}.csv",
        delays_csv="csv/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_delays_{diffs_or_changes}.csv",
        comm_comp_json="stats/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.json"
    output:
        "plots/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}_local.html",
        svg_out="plots/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}_local.svg"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        change_option=lambda wildcards: "-c" if wildcards.diffs_or_changes == "changes" else ""
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.angles_csv} {input.distances_csv} {input.delays_csv} 15 "{wildcards.modname}" "{output.svg_out}" {params.change_option} --comm_comp_json "{input.comm_comp_json}"'
        """

def get_const_sop_stat_diff_plot_paths(wildcards):
    """
    Returns all paths for local and full simulation time plots of differences and changes of elevation angles, distances and delays for the
    reference mobility, alternative (new) mobility and constellation specified in wildcards.
    """
    return expand("plots/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_{modname}_angles_distances_delays_{diffs_or_changes}{local_option}.{format}",
                location=wildcards.location,
                constellation=wildcards.constellation,
                new_mobility=wildcards.new_mobility,
                modname=get_const_sat_mods(wildcards.constellation),
                diffs_or_changes=["diffs", "changes"],
                format={"svg", "html"},
                local_option=["_local","_full"])

rule plot_const_sop_stat_diffs:
    """
    Plots all local and full simulation time plots of differences and changes of elevation angles, distances and delays for the
    reference mobility, alternative (new) mobility and constellation specified in wildcards.
    """
    input:
        get_const_sop_stat_diff_plot_paths
    output:
        "plots/sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_angles_distances_delays.done"
    shell:
        "touch {output}"

rule calc_aligned_local_sop_stat_diffs:
    """
    Calculates differences between elevation angle, distance and propagation delay to SOP for availability/communication periods
    of the compared mobilities realigned by their zenith, i.e. maximum elevation angle.
    """
    input:
        script="../../scripts/statistics/aligned_period_sop_stat_differences.py",
        comm_comp="stats/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.json",
        ref_mob_period_stats="stats/comm_periods/{location}/{constellation}/sgp4/{modname}_communication-periods.json",
        new_mob_period_stats="stats/comm_periods/{location}/{constellation}/{new_mobility}/{modname}_communication-periods.json"
    output:
        json="stats/local_aligned_sop_diffs/{location}/{constellation}/sgp4-{new_mobility}_{modname}_aligned_{diffs_or_changes}.json"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        changes_option=lambda wildcards: "--changes" if wildcards.diffs_or_changes == "changes" else ""
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} "{input.comm_comp}" sgp4 "{input.ref_mob_period_stats}" {wildcards.new_mobility} "{input.new_mob_period_stats}" {params.changes_option} --json "{output.json}"'
        """

rule plot_aligned_local_sop_stat_diffs:
    """
    Plots differences between elevation angle, distance and propagation delay to SOP for availability/communication periods
    of the compared mobilities realigned by their zenith, i.e. maximum elevation angle.
    """
    input:
        script="../../scripts/statistics/aligned_period_sop_stat_differences.py",
        comm_comp="stats/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.json",
        ref_mob_period_stats="stats/comm_periods/{location}/{constellation}/sgp4/{modname}_communication-periods.json",
        new_mob_period_stats="stats/comm_periods/{location}/{constellation}/{new_mobility}/{modname}_communication-periods.json"
    output:
        plot="plots/local_aligned_sop_diffs/{location}/{constellation}/sgp4-{new_mobility}_{modname}_aligned_{diffs_or_changes}.svg"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        changes_option=lambda wildcards: "--changes" if wildcards.diffs_or_changes == "changes" else ""
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} "{input.comm_comp}" sgp4 "{input.ref_mob_period_stats}" {wildcards.new_mobility} "{input.new_mob_period_stats}" {params.changes_option} --plot "{output.plot}"'
        """

def get_const_aligned_local_sop_stat_diffs_jsons(wildcards):
    return expand("stats/local_aligned_sop_diffs/{location}/{constellation}/sgp4-{new_mobility}_{modname}_aligned_{diffs_or_changes}.json",
                    location=wildcards.location,
                    constellation=wildcards.constellation,
                    new_mobility=["circular", "kepler"],
                    modname=get_const_sat_mods(wildcards.constellation),
                    diffs_or_changes=["differences", "changes"])

def get_const_aligned_local_sop_stat_diffs_plots(wildcards):
    return expand("plots/local_aligned_sop_diffs/{location}/{constellation}/sgp4-{new_mobility}_{modname}_aligned_{diffs_or_changes}.svg",
                    location=wildcards.location,
                    constellation=wildcards.constellation,
                    new_mobility=["circular", "kepler"],
                    modname=get_const_sat_mods(wildcards.constellation),
                    diffs_or_changes=["differences", "changes"])

rule calc_const_aligned_local_sop_stat_diffs:
    """
    Calculates differences between elevation angle, distance and propagation delay to SOP for availability/communication periods
    of the compared mobilities realigned by their zenith, i.e. maximum elevation angle for all satellites of a constellation w.r.t.
    the specified constellation.
    """
    input:
        get_const_aligned_local_sop_stat_diffs_jsons
    output:
        "stats/local_aligned_sop_diffs/{location}/{constellation}.done"
    shell:
        """
        touch {output}
        """

rule plot_const_aligned_local_sop_stat_diffs:
    """
    Plots differences between elevation angle, distance and propagation delay to SOP for availability/communication periods
    of the compared mobilities realigned by their zenith, i.e. maximum elevation angle for all satellites of a constellation w.r.t.
    the specified constellation.
    """
    input:
        get_const_aligned_local_sop_stat_diffs_plots
    output:
        "plots/local_aligned_sop_diffs/{location}/{constellation}.done"
    shell:
        """
        touch {output}
        """

rule plot_aligned_sop_stat_diffs_or_changes_at_offset:
    """
    Plots between-model elevation angle / distance / propagation delay differences of availability periods aligned 
    w.r.t. their zenith, i.e. maximum elevation angle, on the y-axis to the offset of the SGP4 period start to the TLE epoch.
    """
    input:
        script="../../scripts/plots/plot_aligned_sop_stats_at_offset.py",
        stats="stats/local_aligned_sop_diffs/{location}/{constellation}/sgp4-{new_mobility}_{modname}_aligned_{diffs_or_changes}.json"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/aligned_sop_diffs/{location}/{constellation}/sgp4-{new_mobility}_{modname}_{stat}_aligned_{diffs_or_changes}_{avg_or_max}.svg"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} "{input.stats}" {wildcards.stat} {wildcards.avg_or_max} "{output}"'
        """

def get_const_aligned_sop_stat_diffs_or_changes_plots(wildcards):
    return expand("plots/aligned_sop_diffs/{location}/{constellation}/sgp4-{new_mobility}_{modname}_{stat}_aligned_{diffs_or_changes}_{avg_or_max}.svg",
                    location=wildcards.location,
                    constellation=wildcards.constellation,
                    new_mobility=["circular","kepler"],
                    modname=get_const_sat_mods(wildcards.constellation),
                    stat=["angle", "delay"],
                    diffs_or_changes=["differences", "changes"],
                    avg_or_max=["avg", "max"])

rule plot_const_aligned_sop_stat_diffs_or_changes_at_offset:
    """
    Plots between-model elevation angle / distance / propagation delay differences of availability periods aligned 
    w.r.t. their zenith, i.e. maximum elevation angle, on the y-axis to the offset of the SGP4 period start to the TLE epoch
    for whole specified constellation in one plot per satellite w.r.t. specified location.
    """
    input:
        get_const_aligned_sop_stat_diffs_or_changes_plots
    output:
        "plots/aligned_sop_diffs/{location}/{constellation}.done"
    shell:
        "touch {output}"

rule plot_const_aligned_sop_stat_diffs_at_offset_in_one:
    """
    Plots between-model elevation angle / distance / propagation delay differences of availability periods aligned 
    w.r.t. their zenith, i.e. maximum elevation angle, on the y-axis to the offset of the SGP4 period start to the TLE epoch
    for whole specified constellation in one plot for all satellites w.r.t. specified location.
    """
    input:
        get_const_aligned_local_sop_stat_diffs_jsons,
        script="../../scripts/plots/plot_const_aligned_sop_stats_at_offset.py"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        aligned_diffs_dir="stats/local_aligned_sop_diffs/{location}/{constellation}"
    output:
        svg_out="plots/aligned_sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_all_{stat}_{avg_or_max}_differences.svg"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {params.aligned_diffs_dir} {wildcards.new_mobility} {wildcards.stat} {wildcards.avg_or_max} {output.svg_out}'
        """

rule group_const_aligned_local_sop_stat_diffs:
    """
    Groups differences between availability periods realigned with their minimum elevation angle / zenith into groups
    of 5° step inclination intervals according to maximum occuring elevation angle of each availability period.
    """
    input:
        get_const_aligned_local_sop_stat_diffs_jsons,
        script="../../scripts/statistics/group_aligned_period_sop_stat_diffs_by_angle.py",
        ref_comm_periods="stats/comm_periods/{location}/{constellation}/sgp4.done"
    params:
        aligned_stat_diffs_dir="stats/local_aligned_sop_diffs/{location}/{constellation}",
        ref_comm_periods_dir="stats/comm_periods/{location}/{constellation}/sgp4"
    output:
        "stats/local_aligned_sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_groups.json"
    shell:
        """python3 {input.script} {params.ref_comm_periods_dir} {params.aligned_stat_diffs_dir} {wildcards.new_mobility} 5 {output}"""

rule plot_anglegroup_aligned_delay_duration_diffs_at_offset:
    """
    Plots differences of delays and durations between availability periods realigned with their minimum elevation angle / zenith 
    of the respective satellite modules of each 5°-step inclincation group in one delay/duration plot each.
    """
    input:
        script="../../scripts/plots/plot_anglegroup_sop_stats_at_offset.py",
        grouped_periods="stats/local_aligned_sop_diffs/{location}/{constellation}_sgp4-{new_mobility}_groups.json"
    params:
        delay_output_dir="plots/grouped_aligned_delay_diffs/{location}/{constellation}/sgp4-{new_mobility}",
        duration_output_dir="plots/grouped_aligned_duration_diffs/{location}/{constellation}/sgp4-{new_mobility}"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/grouped_aligned_delay_diffs/{location}/{constellation}/sgp4-{new_mobility}.done",
        "plots/grouped_aligned_duration_diffs/{location}/{constellation}/sgp4-{new_mobility}.done"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.grouped_periods} 5 {wildcards.new_mobility} {params.delay_output_dir} {params.duration_output_dir}'
        touch {output[0]}
        touch {output[1]}
        """

rule worst_case_delay_change:
    """
    Calculates worst-case between-model delay changes in 6h backward/forward propagation from TLE epoch for specifed constellation
    and location.
    """
    input:
        script="../../scripts/statistics/worst_case_delay_changes.py",
        delay_changes_csv = "csv/sop_diffs/{location}/{constellation}_sgp4-{mob2}_delays_differences.csv",
        tle_times="tles/{constellation}_times.json"
    params:
        comm_comp_dir = "stats/compare_comm_periods/{location}/{constellation}"
    output:
        "stats/worst_case_delays/{location}_{constellation}_sgp4-{mob2}_worstcase_delay_change.json"
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.delay_changes_csv} {params.comm_comp_dir} {input.tle_times} {wildcards.mob2} {output}'
        """

#### CALCULATING AND PLOTTING COMMUNICATION PERIODS ####
# communication with SOP

rule all_communication_metrics:
    """
    Everything which can be requested as output for communication/availability periods calculated w.r.t. the 
    SOP for the current location, and all configured constellations - which is not data of availability/communication periods.
    It is not recommended to actually request everything. 
    Details on the individual outputs can be found in the respective rules.
    """
    input:
        #expand("plots/comm_periods/{location}/{constellation}_{mobility}_all_periods.svg",
        #        location=config["location"],
        #        constellation=get_composed_constellations(),
        #        mobility=["sgp4","kepler","circular"]),
        #expand("stats/comm_period_all_interval_changes/{location}/{constellation}/sgp4-{new_mobility}_all_interval_changes.json",
        #        location=["quito","sofia","kunlun"],
        #        constellation=get_composed_constellations(),
        #        new_mobility=["kepler","circular"]),
        #expand("plots/comm_period_zenith_interval_changes/{location}/{constellation}/sgp4-{new_mobility}_zenith_interval_difference_at_offset_difference.svg",
        #        location=config["location"],
        #        constellation=get_composed_constellations(),
        #        new_mobility=["kepler","circular"]),
        #expand("plots/compare_comm_periods/{location}/{constellation}_communication_comparisons.done",
        #        location=config["location"],
        #        constellation=get_composed_constellations()),
        expand("stats/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_summary.json",
                location=["kunlun","quito","sofia"],
                constellation=get_composed_constellations(),
                new_mobility=["kepler","circular"]),
        # requires communication periods to be done, hence don't plan plotting this here
        # expand("plots/zenith_shifts/{location}/{constellation}_sgp4-{new_mobility}.done",
        #        location=config["location"],
        #        constellation=get_composed_constellations(),
        #        new_mobility=["kepler","circular"]),
        #expand("plots/zenith_shifts/{location}/{constellation}_sgp4-{new_mobility}_all_{differences_or_changes}.svg",
        #        location=["kunlun","quito","sofia"],
        #        constellation=get_composed_constellations(),
        #        new_mobility=["kepler","circular"],
        #        differences_or_changes=["changes"])
    output:
        "stats/communication.done"
    shell:
        "touch {output}"


rule calc_comm_period_info:
    """
    Creates JSON of periods where communication is possible for the specified constellation, mobility and satellite module name,
    using minimum elevation angle 10 °.
    Each JSON contains the minimum elevation angles, distances and delays relative to the SOP for each communication period,
    as well as the offset to the used TLE's epoch.
    """
    input:
        script="../../scripts/statistics/comm_period_info.py",
        tle_times="tles/{constellation}_times.json",
        angle_csv=lambda wildcards: expand("csv/sop/{location}_{constellation}-{mobility}_angles.csv",
                                    location=wildcards.location,
                                    constellation=wildcards.constellation,
                                    mobility=wildcards.mobility),
        dist_csv=lambda wildcards: expand("csv/sop/{location}_{constellation}-{mobility}_distances.csv",
                                    location=wildcards.location,
                                    constellation=wildcards.constellation,
                                    mobility=wildcards.mobility),
        delay_csv=lambda wildcards: expand("csv/sop/{location}_{constellation}-{mobility}_delays.csv",
                                    location=wildcards.location,
                                    constellation=wildcards.constellation,
                                    mobility=wildcards.mobility)
    output:
        "stats/comm_periods/{location}/{constellation}/{mobility}/{modname}_communication-periods.json"
    params:
        min_angle=config["min_elev_angle"]
    shell:
        "python3 {input.script} {input.angle_csv} {input.dist_csv} {input.delay_csv} {input.tle_times} '{wildcards.modname}' {params.min_angle} '{output}'"

def get_const_comm_period_paths(wildcards):
    return expand("stats/comm_periods/{location}/{constellation}/{mobility}/{modname}_communication-periods.json",
                    location=wildcards.location,
                    constellation=wildcards.constellation,
                    mobility=wildcards.mobility,
                    modname=get_const_sat_mods(wildcards.constellation))

rule get_const_comm_periods:
    """ Request output of all communication periods w.r.t. the specified location of the specified constellation."""
    input:
        get_const_comm_period_paths
    output:
        "stats/comm_periods/{location}/{constellation}/{mobility}.done"
    shell:
        "touch {output}"

rule const_comm_periods_csv:
    """
    CSV with all communication periods, i.e. start and end sim. second, of a constellation w.r.t. a location 
    """
    input:
        "stats/comm_periods/{location}/{constellation}/{mobility}.done",
        script="../../scripts/statistics/all_const_periods.py"
    output:
        "csv/comm_periods/{location}/{constellation}_{mobility}_all_periods.csv"
    params:
        period_infos_dir="stats/comm_periods/{location}/{constellation}/{mobility}/"
    shell:
        "python3 {input.script} {params.period_infos_dir} {output}"

rule plot_const_comm_periods:
    """
    Plot all communication periods, i.e. start and end sim. second, of a constellation w.r.t. a location. 
    """
    input:
        script="../../scripts/plots/plot_const_comm_periods.py",
        periods_csv="csv/comm_periods/{location}/{constellation}_{mobility}_all_periods.csv"
    output:
        "plots/comm_periods/{location}/{constellation}_{mobility}_all_periods.svg"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        sim_time_limit = config["sim-time-limit"]
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.periods_csv} 15 {params.sim_time_limit} {output}'
        """

rule sat_comm_period_zenith_interval_changes:
    """
    Calculate between-model zenith interval changes, for interval pairs (a) current period to next with which it overlaps,
    and (b) next non-overlapping period for availability periods of a satellite module w.r.t. a location.
    """
    input:
        ref_periods="csv/comm_periods/{location}/{constellation}_sgp4_all_periods.csv",
        ref_periods_json="stats/comm_periods/{location}/{constellation}/sgp4/{modname}_communication-periods.json",
        new_periods="csv/comm_periods/{location}/{constellation}_{new_mobility}_all_periods.csv",
        new_periods_json="stats/comm_periods/{location}/{constellation}/{new_mobility}/{modname}_communication-periods.json",
        script="../../scripts/statistics/sat_period_zenith_interval_changes.py"
    output:
        "stats/comm_period_zenith_interval_changes/{location}/{constellation}/{modname}_sgp4-{new_mobility}_zenith_interval_changes.json"
    params:
        sim_time_limit = config["sim-time-limit"]
    shell:
        "python3 {input.script} '{wildcards.modname}' {input.ref_periods} '{input.ref_periods_json}' {input.new_periods} '{input.new_periods_json}' {params.sim_time_limit} '{output}'"    

rule plot_sat_comm_period_zenith_interval_changes:
    """
    Plot between-model zenith interval changes for availability of a satellite module w.r.t. a location.
    """
    input:
        zenith_interval_changes = "stats/comm_period_zenith_interval_changes/{location}/{constellation}/{modname}_sgp4-{new_mobility}_zenith_interval_changes.json",
        script = "../../scripts/plots/plot_zenith_interval_diff_to_offset_diff.py"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/comm_period_zenith_interval_changes/{location}/{constellation}/{modname}_sgp4-{new_mobility}_zenith_interval_difference_at_offset_diff.svg"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} "{input.zenith_interval_changes}" "{output}"'    
        """
        
rule const_comm_period_all_interval_changes:
    """
    Calculate between-model zenith interval changes, for interval pairs (a) current period to next with which it overlaps,
    and (b) next non-overlapping period for all availability periods of a constellation w.r.t. a location.
    """
    input:
        ref_periods="csv/comm_periods/{location}/{constellation}_sgp4_all_periods.csv",
        ref_periods_jsons="stats/comm_periods/{location}/{constellation}/sgp4.done",
        new_periods="csv/comm_periods/{location}/{constellation}_{new_mobility}_all_periods.csv",
        new_periods_jsons="stats/comm_periods/{location}/{constellation}/{new_mobility}.done",
        script="../../scripts/statistics/all_interval_changes.py",
    output:
        "stats/comm_period_all_interval_changes/{location}/{constellation}/sgp4-{new_mobility}_all_interval_changes.json"
    params:
        ref_periods_jsons_dir="stats/comm_periods/{location}/{constellation}/sgp4",
        new_periods_jsons_dir="stats/comm_periods/{location}/{constellation}/{new_mobility}",
        sim_time_limit = config["sim-time-limit"]
    shell:
        "python3 {input.script} {input.ref_periods} {params.ref_periods_jsons_dir} {input.new_periods} {params.new_periods_jsons_dir} {params.sim_time_limit} {output}"

rule plot_const_comm_period_zenith_interval_changes_at_offset_diff:
    """
    Calculate between-model zenith interval changes, for interval pairs (a) current period to next with which it overlaps,
    and (b) next non-overlapping period for all availability periods of a constellation w.r.t. a location.
    """
    input:
        all_interval_changes = "stats/comm_period_all_interval_changes/{location}/{constellation}/sgp4-{new_mobility}_all_interval_changes.json",
        script = "../../scripts/plots/plot_zenith_interval_diff_to_offset_diff.py"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/comm_period_zenith_interval_changes/{location}/{constellation}/sgp4-{new_mobility}_zenith_interval_difference_at_offset_difference.svg"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.all_interval_changes} {output}'
        """

rule compare_comm_period_info:
    """
    Creates JSON of overlapping and non-overlapping communication periods of the reference mobility and alternative (new) mobility,
    for the specified satellite module name of the specified constellation.
    For each period group (overlap) and unmatched period, the JSON includes: 
     - start and end times of the periods
     - offset to the used TLE's epoch
     - if there are multiple matches of the reference period or new period of a group
     - "ref_coverage" statistic: How much of the reference period is covered by the period of the alternative mobility.
     - "new_excluded" statistic: How much of the period of the alternative mobility is included in the reference period.
     - "excluded_time_to_ref_time" statistic: Ratio of the time that's not included in the reference period to the time of the reference period.
    """
    input:
        script="../../scripts/statistics/compare_comm_period_info.py",
        ref_stats="stats/comm_periods/{location}/{constellation}/sgp4/{modname}_communication-periods.json",
        new_stats="stats/comm_periods/{location}/{constellation}/{new_mobility}/{modname}_communication-periods.json"
    output:
        "stats/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.json"
    shell:
        "python3 {input.script} '{input.ref_stats}' '{input.new_stats}' '{output}'"

rule plot_communication_period_comparison:
    """
    Plots line plots for elevation angles, distances and delays relative to the SOP in the overlapping communication periods of the 
    specified reference mobility, alternative (new) mobility, constellation and satellite module name.
    Each plot contains a line for the reference mobility and one line for the alternative mobility. To clearly show where communication
    periods start and end, values outside of the respective periods are set to 0.
    """
    input:
        script="../../scripts/plots/plot_comm_comparison.py",
        ref_stats="stats/comm_periods/{location}/{constellation}/sgp4/{modname}_communication-periods.json",
        new_stats="stats/comm_periods/{location}/{constellation}/{new_mobility}/{modname}_communication-periods.json",
        period_groups="stats/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.json"
    output:
        "plots/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.svg",
        "plots/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.html"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        output_basepath="plots/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} "{input.period_groups}" sgp4 "{input.ref_stats}" {wildcards.new_mobility} "{input.new_stats}" "{params.output_basepath}"'
        """

def get_const_comm_comp_json_paths(wildcards):
    """
    Returns all paths of JSONs containing the matched periods of the constellation specified in wildcards,
    currently only for reference mobility SGP4 and alternative (new) mobility Kepler. 
    """
    return expand("stats/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.json",
            location=wildcards.location,
            constellation=wildcards.constellation,
            new_mobility=["kepler", "circular"],  
            modname=get_const_sat_mods(wildcards.constellation))

def get_const_comm_comp_plot_paths(wildcards):
    """
    Returns all paths of the plots comparing elevation angles, distances and delays in the matched communication periods of the constellation specified in wildcards,
    currently only for reference mobility SGP4 and alternative (new) mobility Kepler. 
    """
    return expand("plots/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.{format}",
            location=wildcards.location,
            constellation=wildcards.constellation,  
            new_mobility=["kepler", "circular"],
            modname=get_const_sat_mods(wildcards.constellation),
            format=["svg", "html"])

rule plot_const_communication_period_comparisons:
    """
    Plots all plots comparing elevation angles, distances and delays for the matched communication periods of the constellation specified in wildcards.
    """
    input:
        get_const_comm_comp_plot_paths
    output:
        "plots/compare_comm_periods/{location}/{constellation}_communication_comparisons.done"
    shell:
        "touch {output}"

rule calc_const_communication_period_comparisons:
    """
    Plots all plots comparing elevation angles, distances and delays for the matched communication periods of the constellation specified in wildcards.
    """
    input:
        get_const_comm_comp_json_paths
    output:
        "stats/compare_comm_periods/{location}/{constellation}_communication_comparisons.done"
    shell:
        "touch {output}"

rule calc_communication_period_comparison_summary:
    """
    Calculates summary, i.e. averages, of overlap statistics for all communication period comparisons of the specified reference mobility, alternative (new) mobility
    and constellation, i.e. for the statistics "ref_coverage", "new_excluded" and "excluded_time_to_ref_time". 
    For explanation, see rule 'compare_comm_period_info'.
    """
    input:
        get_const_comm_comp_json_paths,
        script="../../scripts/statistics/summarize_comm_comp_info.py"
    output:
        "stats/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_summary.json"
    params:
        comp_jsons_dir="stats/compare_comm_periods/{location}/{constellation}/"
    shell:
        "python3 {input.script} {params.comp_jsons_dir} {wildcards.new_mobility} {output}"

rule plot_const_overlap_stats:
    """
    Plots bar plot with two bars for each satellite module in the specified constellation, one for "avg_ref_coverage" and "excluded_time_to_ref_time".
    """
    input:
        get_const_comm_comp_json_paths,
        script="../../scripts/plots/plot_const_overlap_stats.py"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/compare_comm_periods/{location}/{constellation}_sgp4-{new_mobility}_overlaps_plot.html",
        svg_out="plots/compare_comm_periods/{location}/{constellation}_sgp4-{new_mobility}_overlaps_plot.svg"
    params:
        comp_jsons_dir="stats/compare_comm_periods/{location}/{constellation}/"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {params.comp_jsons_dir} {output.svg_out}'
        """

rule plot_zenith_shifts:
    """
    Plots zenith shifts of the availability periods of a satellite w.r.t. a location.
    """
    input:
        script="../../scripts/plots/plot_sat_period_zenith_shifts.py",
        comm_comp="stats/compare_comm_periods/{location}/{constellation}/sgp4-{new_mobility}_{modname}_communication_comparison.json"
    output:
        "plots/zenith_shifts/{location}/{constellation}/sgp4-{new_mobility}_{modname}_zenith_shifts.svg"
    container:
        "../../singularity/singularity-space_veins.sif"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} "{input.comm_comp}" "{output}"'
        """

def get_const_multiple_overlapping_periods_zenith_shift_paths(wildcards):
    """
    Get paths of zenith shift plots of satellites who have multiple availability periods w.r.t. a location.
    """
    multiple_overlapping_periods_modnames = []
    for comm_comp_fname in filter( lambda fname: fname.endswith("communication_comparison.json") and wildcards.new_mobility in fname, 
                                    os.listdir(f"stats/compare_comm_periods/{wildcards.location}/{wildcards.constellation}") ):
        
        with open(f"stats/compare_comm_periods/{wildcards.location}/{wildcards.constellation}/" + comm_comp_fname) as json_f:
            comm_comp = json.load(json_f)

        if len(comm_comp["period_groups"]) > 1:
            multiple_overlapping_periods_modnames.append(comm_comp["modname"])
    
    return expand("plots/zenith_shifts/{location}/{constellation}/sgp4-{new_mobility}_{modname}_zenith_shifts.svg",
                    location=wildcards.location,
                    constellation=wildcards.constellation,
                    new_mobility=wildcards.new_mobility,
                    modname=multiple_overlapping_periods_modnames)


rule plot_const_multiple_overlapping_periods_zenith_shifts:
    """
    Plot zenith shift plots of satellites who have multiple availability periods w.r.t. a location.
    """
    input:
        "stats/compare_comm_periods/{location}/{constellation}_communication_comparisons.done",
        get_const_multiple_overlapping_periods_zenith_shift_paths
    output:
        "plots/zenith_shifts/{location}/{constellation}_sgp4-{new_mobility}.done"
    shell:
        "touch {output}"

rule plot_const_periods_zenith_shifts_in_one:
    "Plot zenith shifts of a whole constellation w.r.t. a location in one plot."
    input:
        get_const_comm_comp_json_paths,
        script="../../scripts/plots/plot_const_period_zenith_shifts.py",
        comm_comp="stats/compare_comm_periods/{location}/{constellation}_communication_comparisons.done"
    output:
        "plots/zenith_shifts/{location}/{constellation}_sgp4-{new_mobility}_all_{differences_or_changes}.html",
        svg_out="plots/zenith_shifts/{location}/{constellation}_sgp4-{new_mobility}_all_{differences_or_changes}.svg"
    container:
        "../../singularity/singularity-space_veins.sif"
    params:
        difference_option=lambda wildcards: "--differences" if wildcards.differences_or_changes == "differences" else "",
        comm_comp_dir="stats/compare_comm_periods/{location}/{constellation}"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {wildcards.new_mobility} {params.comm_comp_dir} {output.svg_out} {params.difference_option}'
        """

#### SATELLITE AVAILABILITY METRICS & PLOTS ####

rule all_availability_results:
    """
    Everything which can be requested as output for availability data for the current location,
    and all configured constellations - which is not data of availability/communication periods.
    Details on the individual outputs can be found in the respective rules.
    """
    input:
        expand("stats/available_sats/{location}/{constellation}_{mobility}_available_sats.json",
                location=["quito","sofia","kunlun"],
                constellation=get_composed_constellations(),
                mobility=["sgp4", "kepler", "circular"]),
        expand("plots/available_sats_diffs/{location}/{constellation}_sgp4-{new_mobility}_available_sat_diffs.svg",
                location=["quito","sofia","kunlun"],
                constellation=get_composed_constellations(),
                new_mobility=["kepler", "circular"])
    output:
        "stats/availability.done"
    shell:
        "touch {output}"

rule available_sats:
    """
    Calculates absolute times and ratios of these times w.r.t. total simulation time of availability
    of (1) specific numbers of available satellites, and (2) availability of >=1, >=2, >=3 satellites,
    for specified location, constellation and mobility model.
    """
    input:
        "stats/comm_periods/{location}/{constellation}/{mobility}.done",
        script="../../scripts/statistics/available_sats_at_simtime.py"
    output:
        "stats/available_sats/{location}/{constellation}_{mobility}_available_sats.json"
    params:
        comm_period_info_dir="stats/comm_periods/{location}/{constellation}/{mobility}",
        sim_time_limit = config["sim-time-limit"]
    shell:
        "python3 {input.script} {params.comm_period_info_dir} {wildcards.mobility} 15 {params.sim_time_limit} {output}"

rule available_sat_diffs:
    """
    Calculates between-model differences of absolute times and ratios of these times w.r.t. total simulation time 
    of availability of (1) specific numbers of available satellites, and (2) availability of >=1, >=2, >=3 satellites,
    for specified location, constellation and mobility model.

    Calculation of all_interval_changes was too computationally expensive for thesis, hence only included as comments here
    and in script.
    """
    input:
        script="../../scripts/statistics/available_sats_diffs.py",
        ref_availables="stats/available_sats/{location}/{constellation}_sgp4_available_sats.json",
        ref_comm_periods="stats/comm_periods/{location}/{constellation}/sgp4.done",
        new_availables="stats/available_sats/{location}/{constellation}_{new_mobility}_available_sats.json",
        new_comm_periods="stats/comm_periods/{location}/{constellation}/kepler.done",
        # all_interval_changes="stats/comm_period_all_interval_changes/{location}/{constellation}/sgp4-{new_mobility}_all_interval_changes.json"
    params:
        ref_comm_periods_dir="stats/comm_periods/{location}/{constellation}/sgp4",
        new_comm_periods_dir="stats/comm_periods/{location}/{constellation}/kepler"
    output:
        "stats/available_sats/diffs/{location}/{constellation}_sgp4-{new_mobility}_available_sat_diffs.json"
    shell:
        "python3 {input.script} {input.ref_availables} {input.new_availables} {params.ref_comm_periods_dir} {params.new_comm_periods_dir} {output}"

rule plot_available_sats_diffs:
    "Plots between-model distances of number of available satellites per simulation second."
    input:
        script="../../scripts/plots/plot_available_sats_diffs.py",
        availables_diffs="stats/available_sats/diffs/{location}/{constellation}_sgp4-{new_mobility}_available_sat_diffs.json"
    container:
        "../../singularity/singularity-space_veins.sif"
    output:
        "plots/available_sats_diffs/{location}/{constellation}_sgp4-{new_mobility}_available_sat_diffs.svg"
    shell:
        """
        cd examples/space_veins
        bash -i -c 'python3 {input.script} {input.availables_diffs} {output}'
        """